<!DOCTYPE html>

<html>

<head>

<meta charset="utf-8" />
<meta name="generator" content="pandoc" />
<meta http-equiv="X-UA-Compatible" content="IE=EDGE" />




<title>apply関数群に慣れておこう</title>

<script src="apply_files/header-attrs-2.17/header-attrs.js"></script>
<script src="apply_files/jquery-3.6.0/jquery-3.6.0.min.js"></script>
<meta name="viewport" content="width=device-width, initial-scale=1" />
<link href="apply_files/bootstrap-3.3.5/css/bootstrap.min.css" rel="stylesheet" />
<script src="apply_files/bootstrap-3.3.5/js/bootstrap.min.js"></script>
<script src="apply_files/bootstrap-3.3.5/shim/html5shiv.min.js"></script>
<script src="apply_files/bootstrap-3.3.5/shim/respond.min.js"></script>
<style>h1 {font-size: 34px;}
       h1.title {font-size: 38px;}
       h2 {font-size: 30px;}
       h3 {font-size: 24px;}
       h4 {font-size: 18px;}
       h5 {font-size: 16px;}
       h6 {font-size: 12px;}
       code {color: inherit; background-color: rgba(0, 0, 0, 0.04);}
       pre:not([class]) { background-color: white }</style>
<script src="apply_files/navigation-1.1/tabsets.js"></script>
<meta name="ROBOTS" content="INDEX,FOLLOW"/>
<link href='http://www.hatena.ne.jp/uncorrelated/' rel='author'/>
<link rel="SHORTCUT ICON" href="/img/miniicon.ico"/>
<script type="text/javascript">

  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-10387742-4']);
  _gaq.push(['_trackPageview']);

  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();
</script>

<style type="text/css">
  code{white-space: pre-wrap;}
  span.smallcaps{font-variant: small-caps;}
  span.underline{text-decoration: underline;}
  div.column{display: inline-block; vertical-align: top; width: 50%;}
  div.hanging-indent{margin-left: 1.5em; text-indent: -1.5em;}
  ul.task-list{list-style: none;}
    </style>



<style type="text/css">
  code {
    white-space: pre;
  }
  .sourceCode {
    overflow: visible;
  }
</style>
<style type="text/css" data-origin="pandoc">
pre > code.sourceCode { white-space: pre; position: relative; }
pre > code.sourceCode > span { display: inline-block; line-height: 1.25; }
pre > code.sourceCode > span:empty { height: 1.2em; }
.sourceCode { overflow: visible; }
code.sourceCode > span { color: inherit; text-decoration: inherit; }
div.sourceCode { margin: 1em 0; }
pre.sourceCode { margin: 0; }
@media screen {
div.sourceCode { overflow: auto; }
}
@media print {
pre > code.sourceCode { white-space: pre-wrap; }
pre > code.sourceCode > span { text-indent: -5em; padding-left: 5em; }
}
pre.numberSource code
  { counter-reset: source-line 0; }
pre.numberSource code > span
  { position: relative; left: -4em; counter-increment: source-line; }
pre.numberSource code > span > a:first-child::before
  { content: counter(source-line);
    position: relative; left: -1em; text-align: right; vertical-align: baseline;
    border: none; display: inline-block;
    -webkit-touch-callout: none; -webkit-user-select: none;
    -khtml-user-select: none; -moz-user-select: none;
    -ms-user-select: none; user-select: none;
    padding: 0 4px; width: 4em;
    color: #aaaaaa;
  }
pre.numberSource { margin-left: 3em; border-left: 1px solid #aaaaaa;  padding-left: 4px; }
div.sourceCode
  {   }
@media screen {
pre > code.sourceCode > span > a:first-child::before { text-decoration: underline; }
}
code span.al { color: #ff0000; font-weight: bold; } /* Alert */
code span.an { color: #60a0b0; font-weight: bold; font-style: italic; } /* Annotation */
code span.at { color: #7d9029; } /* Attribute */
code span.bn { color: #40a070; } /* BaseN */
code span.bu { color: #008000; } /* BuiltIn */
code span.cf { color: #007020; font-weight: bold; } /* ControlFlow */
code span.ch { color: #4070a0; } /* Char */
code span.cn { color: #880000; } /* Constant */
code span.co { color: #60a0b0; font-style: italic; } /* Comment */
code span.cv { color: #60a0b0; font-weight: bold; font-style: italic; } /* CommentVar */
code span.do { color: #ba2121; font-style: italic; } /* Documentation */
code span.dt { color: #902000; } /* DataType */
code span.dv { color: #40a070; } /* DecVal */
code span.er { color: #ff0000; font-weight: bold; } /* Error */
code span.ex { } /* Extension */
code span.fl { color: #40a070; } /* Float */
code span.fu { color: #06287e; } /* Function */
code span.im { color: #008000; font-weight: bold; } /* Import */
code span.in { color: #60a0b0; font-weight: bold; font-style: italic; } /* Information */
code span.kw { color: #007020; font-weight: bold; } /* Keyword */
code span.op { color: #666666; } /* Operator */
code span.ot { color: #007020; } /* Other */
code span.pp { color: #bc7a00; } /* Preprocessor */
code span.sc { color: #4070a0; } /* SpecialChar */
code span.ss { color: #bb6688; } /* SpecialString */
code span.st { color: #4070a0; } /* String */
code span.va { color: #19177c; } /* Variable */
code span.vs { color: #4070a0; } /* VerbatimString */
code span.wa { color: #60a0b0; font-weight: bold; font-style: italic; } /* Warning */

</style>
<script>
// apply pandoc div.sourceCode style to pre.sourceCode instead
(function() {
  var sheets = document.styleSheets;
  for (var i = 0; i < sheets.length; i++) {
    if (sheets[i].ownerNode.dataset["origin"] !== "pandoc") continue;
    try { var rules = sheets[i].cssRules; } catch (e) { continue; }
    var j = 0;
    while (j < rules.length) {
      var rule = rules[j];
      // check if there is a div.sourceCode rule
      if (rule.type !== rule.STYLE_RULE || rule.selectorText !== "div.sourceCode") {
        j++;
        continue;
      }
      var style = rule.style.cssText;
      // check if color or background-color is set
      if (rule.style.color === '' && rule.style.backgroundColor === '') {
        j++;
        continue;
      }
      // replace div.sourceCode by a pre.sourceCode rule
      sheets[i].deleteRule(j);
      sheets[i].insertRule('pre.sourceCode{' + style + '}', j);
    }
  }
})();
</script>

<style type="text/css">
  p.abstract{
    text-align: center;
    font-weight: bold;
  }
  div.abstract{
    margin: auto;
    width: 90%;
  }
</style>



<link rel="stylesheet" href="styles.css" type="text/css" />



<style type = "text/css">
.main-container {
  max-width: 940px;
  margin-left: auto;
  margin-right: auto;
}
img {
  max-width:100%;
}
.tabbed-pane {
  padding-top: 12px;
}
.html-widget {
  margin-bottom: 20px;
}
button.code-folding-btn:focus {
  outline: none;
}
summary {
  display: list-item;
}
details > summary > p:only-child {
  display: inline;
}
pre code {
  padding: 0;
}
</style>



<!-- tabsets -->

<style type="text/css">
.tabset-dropdown > .nav-tabs {
  display: inline-table;
  max-height: 500px;
  min-height: 44px;
  overflow-y: auto;
  border: 1px solid #ddd;
  border-radius: 4px;
}

.tabset-dropdown > .nav-tabs > li.active:before, .tabset-dropdown > .nav-tabs.nav-tabs-open:before {
  content: "\e259";
  font-family: 'Glyphicons Halflings';
  display: inline-block;
  padding: 10px;
  border-right: 1px solid #ddd;
}

.tabset-dropdown > .nav-tabs.nav-tabs-open > li.active:before {
  content: "\e258";
  font-family: 'Glyphicons Halflings';
  border: none;
}

.tabset-dropdown > .nav-tabs > li.active {
  display: block;
}

.tabset-dropdown > .nav-tabs > li > a,
.tabset-dropdown > .nav-tabs > li > a:focus,
.tabset-dropdown > .nav-tabs > li > a:hover {
  border: none;
  display: inline-block;
  border-radius: 4px;
  background-color: transparent;
}

.tabset-dropdown > .nav-tabs.nav-tabs-open > li {
  display: block;
  float: none;
}

.tabset-dropdown > .nav-tabs > li {
  display: none;
}
</style>

<!-- code folding -->




</head>

<body>


<div class="container-fluid main-container">



<div class="header">
<!--#include virtual="/parts/header.txt"-->
</div>
<div class="advertisement">
<!--#include virtual="/parts/ad.txt"-->
</div>
<div class="right">
<!--#include virtual="menu.txt"-->
<!--#include virtual="/parts/right.txt"-->
</div>
<div class="article" id="article">

<div id="header">



<h1 class="title toc-ignore">apply関数群に慣れておこう</h1>
<!--#include virtual="/parts/under_h2.txt"-->
<p>ループ処理を簡潔に書けるので、使いこなせると便利な関数群の説明です。</p>

</div>

<div id="TOC">
<ul>
<li><a href="#データセットの作成" id="toc-データセットの作成"><span
class="toc-section-number">1</span> データセットの作成</a></li>
<li><a href="#引数がベクターもしくはリスト"
id="toc-引数がベクターもしくはリスト"><span
class="toc-section-number">2</span>
引数がベクターもしくはリスト</a></li>
<li><a href="#引数が行列もしくはデータフレーム"
id="toc-引数が行列もしくはデータフレーム"><span
class="toc-section-number">3</span> 引数が行列もしくはデータフレーム</a>
<ul>
<li><a href="#引数がデータフレーム" id="toc-引数がデータフレーム"><span
class="toc-section-number">3.1</span> 引数がデータフレーム</a></li>
<li><a href="#引数が行列" id="toc-引数が行列"><span
class="toc-section-number">3.2</span> 引数が行列</a></li>
</ul></li>
<li><a href="#カテゴリ変数ごとの関数に適応"
id="toc-カテゴリ変数ごとの関数に適応"><span
class="toc-section-number">4</span>
カテゴリ変数ごとの関数に適応</a></li>
<li><a href="#慣れたら便利" id="toc-慣れたら便利"><span
class="toc-section-number">5</span> 慣れたら便利</a></li>
</ul>
</div>

<p><code>lapply</code>, <code>sapply</code>, <code>vapply</code>,
<code>apply</code>, <code>tapply</code>の順番に説明していきます。</p>
<div id="データセットの作成" class="section level1" number="1">
<h1><span class="header-section-number">1</span> データセットの作成</h1>
<p><code>apply</code>を試す前に、処理するデータをつくります。</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode r"><code class="sourceCode r"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a>df01 <span class="ot">&lt;-</span> <span class="fu">with</span>(<span class="fu">list</span>(<span class="at">n=</span><span class="dv">100</span>), {</span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a>    x <span class="ot">&lt;-</span> <span class="dv">1</span><span class="sc">:</span>n</span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a>    p <span class="ot">&lt;-</span> <span class="fu">runif</span>(n)</span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a>    d <span class="ot">&lt;-</span> <span class="fu">ifelse</span>(p<span class="sc">&lt;</span><span class="fl">0.3</span>, <span class="st">&quot;A&quot;</span>, <span class="fu">ifelse</span>(p<span class="sc">&lt;</span><span class="fl">0.7</span>, <span class="st">&quot;B&quot;</span>, <span class="st">&quot;C&quot;</span>))</span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a>    z <span class="ot">&lt;-</span> <span class="fu">rnorm</span>(n) <span class="sc">+</span> p</span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a>    y <span class="ot">&lt;-</span> <span class="dv">1</span> <span class="sc">+</span> <span class="dv">2</span><span class="sc">*</span>x <span class="sc">-</span> z <span class="sc">+</span> <span class="fu">rnorm</span>(n)</span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a>    <span class="fu">data.frame</span>(y, x, z, d)</span>
<span id="cb1-8"><a href="#cb1-8" aria-hidden="true" tabindex="-1"></a>})</span></code></pre></div>
</div>
<div id="引数がベクターもしくはリスト" class="section level1"
number="2">
<h1><span class="header-section-number">2</span>
引数がベクターもしくはリスト</h1>
<p>ベクターもしくはリストの引数を取れる<code>sapply</code>/<code>lapply</code>は、名前からすると簡素版と言った感じですが、（ベクターに二次元構造を持たせた）行列や、（リストに各要素の長さが等しいという制約のついた）データフレームを要求する<code>apply</code>よりも、構造的にはむしろ基本です。
<code>lapply</code>がもっとも単純な関数で、戻り値としてリストを返してきます。</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode r"><code class="sourceCode r"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="fu">lapply</span>(<span class="fu">unique</span>(df01<span class="sc">$</span>d), <span class="cf">function</span>(n){ <span class="fu">sprintf</span>(<span class="st">&quot;列名%s&quot;</span>, n)})</span></code></pre></div>
<pre><code>[[1]]
[1] &quot;列名C&quot;

[[2]]
[1] &quot;列名B&quot;

[[3]]
[1] &quot;列名A&quot;</code></pre>
<p>リストのままでは使いづらいので、ラッパー関数<code>sapply</code>が用意されています。</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode r"><code class="sourceCode r"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="fu">sapply</span>(<span class="fu">unique</span>(df01<span class="sc">$</span>d), <span class="cf">function</span>(n){ <span class="fu">sprintf</span>(<span class="st">&quot;列名%s&quot;</span>, n)})</span></code></pre></div>
<pre><code>      C       B       A 
&quot;列名C&quot; &quot;列名B&quot; &quot;列名A&quot; </code></pre>
<p>以下のようにオプションをつけると、<code>sapply</code>は<code>lapply</code>と同じ動作になります。</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode r"><code class="sourceCode r"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a><span class="fu">sapply</span>(<span class="fu">unique</span>(df01<span class="sc">$</span>d), <span class="cf">function</span>(n){ <span class="fu">sprintf</span>(<span class="st">&quot;列名%s&quot;</span>, n)}, <span class="at">simplify =</span> <span class="cn">FALSE</span>, <span class="at">USE.NAMES =</span> <span class="cn">TRUE</span>)</span></code></pre></div>
<p><code>vapply</code>は<code>sapply</code>と同じ目的に使いますが、戻り値の型をチェックするところが<code>sapply</code>と異なります。</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode r"><code class="sourceCode r"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a><span class="fu">sapply</span>(df01, max) <span class="co"># エラーにならない</span></span>
<span id="cb7-2"><a href="#cb7-2" aria-hidden="true" tabindex="-1"></a><span class="fu">vapply</span>(df01, max, <span class="fu">numeric</span>(<span class="dv">1</span>)) <span class="co"># エラーになる</span></span></code></pre></div>
</div>
<div id="引数が行列もしくはデータフレーム" class="section level1"
number="3">
<h1><span class="header-section-number">3</span>
引数が行列もしくはデータフレーム</h1>
<p>引数が行列もしくはデータフレームのときは<code>apply</code>関数を用います。行ごと、もしくは列ごとに関数を用いることができます。
まずはmean関数と行列にする都合で、numeric型の列だけ選んでおきます。</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode r"><code class="sourceCode r"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true" tabindex="-1"></a>df02 <span class="ot">&lt;-</span> df01[,<span class="fu">c</span>(<span class="st">&quot;y&quot;</span>, <span class="st">&quot;x&quot;</span>, <span class="st">&quot;z&quot;</span>)] </span></code></pre></div>
<div id="引数がデータフレーム" class="section level2" number="3.1">
<h2><span class="header-section-number">3.1</span>
引数がデータフレーム</h2>
<div class="sourceCode" id="cb9"><pre class="sourceCode r"><code class="sourceCode r"><span id="cb9-1"><a href="#cb9-1" aria-hidden="true" tabindex="-1"></a><span class="fu">apply</span>(df02, <span class="dv">1</span>, mean) <span class="co"># 行ごとに合計</span></span></code></pre></div>
<pre><code>  [1]   0.8721908   2.4578997   2.8063148   4.5190937   5.2987565   6.1773954
  [7]   7.3837764   8.0219165   9.3837348   9.6481589  11.3895167  12.1528192
 [13]  13.1162937  14.4228923  15.4778466  16.2251258  16.9702118  18.1758140
 [19]  19.1975173  20.0501145  21.6042451  22.3558839  23.0896641  24.4321871
 [25]  25.2685442  26.3227553  27.4179017  28.0449455  28.8857282  30.1814940
 [31]  31.3982665  32.9153599  33.1025521  34.5597912  35.1212401  37.0081960
 [37]  37.1478581  38.3913940  39.1225280  40.0498774  41.8129896  42.6801737
 [43]  43.5759443  44.0872001  45.7716681  46.5105736  47.1349900  48.3187674
 [49]  49.8407080  50.4530922  51.6489051  52.2981161  53.7623737  54.4338262
 [55]  55.0974652  56.6873252  57.0283916  58.8689313  59.6249439  60.2761671
 [61]  61.4202358  63.0891889  63.5415154  63.8694922  64.8536835  65.6257109
 [67]  67.4679757  67.7793285  69.3890173  70.1774670  71.4456162  71.9123215
 [73]  72.7489096  74.8492932  75.5629586  76.6941262  76.6627904  78.2751945
 [79]  79.5710069  80.3720247  81.3296986  82.4262601  83.5418965  83.9222153
 [85]  85.5269986  86.5248674  87.3868799  88.3625864  89.3682496  90.6233891
 [91]  91.1974397  92.0903573  93.6566355  94.2057327  95.0874839  96.2093872
 [97]  97.2104037  97.7396820  99.4605764 100.3113999</code></pre>
<div class="sourceCode" id="cb11"><pre class="sourceCode r"><code class="sourceCode r"><span id="cb11-1"><a href="#cb11-1" aria-hidden="true" tabindex="-1"></a><span class="fu">apply</span>(df02, <span class="dv">2</span>, mean) <span class="co"># 列ごとに合計</span></span></code></pre></div>
<pre><code>          y           x           z 
101.4804340  50.5000000   0.4666765 </code></pre>
<div class="sourceCode" id="cb13"><pre class="sourceCode r"><code class="sourceCode r"><span id="cb13-1"><a href="#cb13-1" aria-hidden="true" tabindex="-1"></a><span class="fu">apply</span>(df02, <span class="dv">2</span>, mean, <span class="at">simplify=</span><span class="cn">FALSE</span>) <span class="co"># 結果をlistにする</span></span></code></pre></div>
<pre><code>$y
[1] 101.4804

$x
[1] 50.5

$z
[1] 0.4666765</code></pre>
</div>
<div id="引数が行列" class="section level2" number="3.2">
<h2><span class="header-section-number">3.2</span> 引数が行列</h2>
<div class="sourceCode" id="cb15"><pre class="sourceCode r"><code class="sourceCode r"><span id="cb15-1"><a href="#cb15-1" aria-hidden="true" tabindex="-1"></a>X <span class="ot">&lt;-</span> <span class="fu">as.matrix</span>(df02) <span class="co"># データフレームを行列にする</span></span>
<span id="cb15-2"><a href="#cb15-2" aria-hidden="true" tabindex="-1"></a><span class="fu">apply</span>(X, <span class="dv">1</span>, max) <span class="co"># 行ごとに最大値</span></span></code></pre></div>
<pre><code>  [1]   1.478401   3.435280   6.181638  10.199357  11.230589  13.331676
  [7]  14.407687  15.573115  17.364858  18.958984  20.845035  22.582115
 [13]  25.546027  28.079375  30.445281  30.671099  32.994809  35.199064
 [19]  38.397267  38.625408  45.539702  44.427607  45.070910  48.658630
 [25]  51.083969  51.255399  54.049646  56.831166  58.149193  60.174504
 [31]  64.377744  66.820674  65.635441  70.716184  70.994112  74.932464
 [37]  72.404552  76.056691  78.085654  79.612948  84.718234  83.593093
 [43]  87.070410  86.386060  90.830162  93.779822  92.904522  96.271999
 [49]  98.451513 101.435423 102.806834 105.833520 106.667489 111.241492
 [55] 110.642839 114.286919 112.405811 118.370471 121.292173 118.842142
 [61] 123.252574 127.086194 127.516977 126.979993 128.432300 131.523955
 [67] 135.919529 134.434841 138.264760 137.817831 143.335894 144.246322
 [73] 146.916904 149.074367 151.942379 153.539316 154.271611 156.268068
 [79] 158.998814 161.211795 161.983916 164.890165 166.120939 167.579673
 [85] 172.169002 174.470298 175.888270 177.501027 181.520178 180.379417
 [91] 182.056802 182.673861 186.944512 188.920205 189.039639 193.421972
 [97] 191.156949 193.824312 199.256417 200.296470</code></pre>
<div class="sourceCode" id="cb17"><pre class="sourceCode r"><code class="sourceCode r"><span id="cb17-1"><a href="#cb17-1" aria-hidden="true" tabindex="-1"></a><span class="fu">apply</span>(X, <span class="dv">2</span>, min) <span class="co"># 列ごとに最小値</span></span></code></pre></div>
<pre><code>         y          x          z 
 0.1381714  1.0000000 -2.4154292 </code></pre>
</div>
</div>
<div id="カテゴリ変数ごとの関数に適応" class="section level1"
number="4">
<h1><span class="header-section-number">4</span>
カテゴリ変数ごとの関数に適応</h1>
<p>カテゴリ変数ごとに平均値を求めるようなことはよくします。</p>
<div class="sourceCode" id="cb19"><pre class="sourceCode r"><code class="sourceCode r"><span id="cb19-1"><a href="#cb19-1" aria-hidden="true" tabindex="-1"></a><span class="fu">with</span>(df01, <span class="fu">tapply</span>(y, d, mean))</span></code></pre></div>
<pre><code>        A         B         C 
104.23333 100.58257  99.82815 </code></pre>
<p>これだけならば<code>xtabs(y ~ d, data=df01)</code>を用いても同様ですが、2位グループのスコアを求めるような処理も同様にかけます。</p>
<div class="sourceCode" id="cb21"><pre class="sourceCode r"><code class="sourceCode r"><span id="cb21-1"><a href="#cb21-1" aria-hidden="true" tabindex="-1"></a><span class="fu">with</span>(df01, <span class="fu">tapply</span>(y, d, <span class="cf">function</span>(v){</span>
<span id="cb21-2"><a href="#cb21-2" aria-hidden="true" tabindex="-1"></a>    <span class="fu">unique</span>(<span class="fu">sort</span>(v))[<span class="dv">2</span>]</span>
<span id="cb21-3"><a href="#cb21-3" aria-hidden="true" tabindex="-1"></a>}))</span></code></pre></div>
<pre><code>       A        B        C 
13.33168 10.19936 11.23059 </code></pre>
</div>
<div id="慣れたら便利" class="section level1" number="5">
<h1><span class="header-section-number">5</span> 慣れたら便利</h1>
<p>最近は他のプログラミング言語でもラムダ式は一般化したのでそうでもないでもですが、慣れるまで違和感があるかも知れません。しかし、覚えたら便利なので、積極的に使っていきましょう。</p>
</div>

</div>
<div class="footer"><!--#include virtual="/parts/footer.txt"--></div>



</div>

<script>

// add bootstrap table styles to pandoc tables
function bootstrapStylePandocTables() {
  $('tr.odd').parent('tbody').parent('table').addClass('table table-condensed');
}
$(document).ready(function () {
  bootstrapStylePandocTables();
});


</script>

<!-- tabsets -->

<script>
$(document).ready(function () {
  window.buildTabsets("TOC");
});

$(document).ready(function () {
  $('.tabset-dropdown > .nav-tabs > li').click(function () {
    $(this).parent().toggleClass('nav-tabs-open');
  });
});
</script>

<!-- code folding -->


<script id="MathJax-script" async
  src="https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-svg.js">
</script>

</body>
</html>
