<!DOCTYPE html>

<html>

<head>

<meta charset="utf-8" />
<meta name="generator" content="pandoc" />
<meta http-equiv="X-UA-Compatible" content="IE=EDGE" />




<title>Rのデータフレームのざっとした説明</title>

<script src="common_files/header-attrs-2.25/header-attrs.js"></script>
<script src="common_files/jquery-3.6.0/jquery-3.6.0.min.js"></script>
<meta name="viewport" content="width=device-width, initial-scale=1" />
<link href="common_files/bootstrap-3.3.5/css/bootstrap.min.css" rel="stylesheet" />
<script src="common_files/bootstrap-3.3.5/js/bootstrap.min.js"></script>
<script src="common_files/bootstrap-3.3.5/shim/html5shiv.min.js"></script>
<script src="common_files/bootstrap-3.3.5/shim/respond.min.js"></script>
<style>h1 {font-size: 34px;}
       h1.title {font-size: 38px;}
       h2 {font-size: 30px;}
       h3 {font-size: 24px;}
       h4 {font-size: 18px;}
       h5 {font-size: 16px;}
       h6 {font-size: 12px;}
       code {color: inherit; background-color: rgba(0, 0, 0, 0.04);}
       pre:not([class]) { background-color: white }</style>
<script src="common_files/navigation-1.1/tabsets.js"></script>
<meta name="ROBOTS" content="INDEX,FOLLOW"/>
<link href='http://www.hatena.ne.jp/uncorrelated/' rel='author'/>
<link rel="SHORTCUT ICON" href="/img/miniicon.ico"/>
<script type="text/javascript">

  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-10387742-4']);
  _gaq.push(['_trackPageview']);

  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();
</script>
<script src="/parts/include_parts.js"></script>

<style type="text/css">
  code{white-space: pre-wrap;}
  span.smallcaps{font-variant: small-caps;}
  span.underline{text-decoration: underline;}
  div.column{display: inline-block; vertical-align: top; width: 50%;}
  div.hanging-indent{margin-left: 1.5em; text-indent: -1.5em;}
  ul.task-list{list-style: none;}
    </style>



<style type="text/css">
  code {
    white-space: pre;
  }
  .sourceCode {
    overflow: visible;
  }
</style>
<style type="text/css" data-origin="pandoc">
pre > code.sourceCode { white-space: pre; position: relative; }
pre > code.sourceCode > span { line-height: 1.25; }
pre > code.sourceCode > span:empty { height: 1.2em; }
.sourceCode { overflow: visible; }
code.sourceCode > span { color: inherit; text-decoration: inherit; }
div.sourceCode { margin: 1em 0; }
pre.sourceCode { margin: 0; }
@media screen {
div.sourceCode { overflow: auto; }
}
@media print {
pre > code.sourceCode { white-space: pre-wrap; }
pre > code.sourceCode > span { text-indent: -5em; padding-left: 5em; }
}
pre.numberSource code
  { counter-reset: source-line 0; }
pre.numberSource code > span
  { position: relative; left: -4em; counter-increment: source-line; }
pre.numberSource code > span > a:first-child::before
  { content: counter(source-line);
    position: relative; left: -1em; text-align: right; vertical-align: baseline;
    border: none; display: inline-block;
    -webkit-touch-callout: none; -webkit-user-select: none;
    -khtml-user-select: none; -moz-user-select: none;
    -ms-user-select: none; user-select: none;
    padding: 0 4px; width: 4em;
    color: #aaaaaa;
  }
pre.numberSource { margin-left: 3em; border-left: 1px solid #aaaaaa;  padding-left: 4px; }
div.sourceCode
  {   }
@media screen {
pre > code.sourceCode > span > a:first-child::before { text-decoration: underline; }
}
code span.al { color: #ff0000; font-weight: bold; } /* Alert */
code span.an { color: #60a0b0; font-weight: bold; font-style: italic; } /* Annotation */
code span.at { color: #7d9029; } /* Attribute */
code span.bn { color: #40a070; } /* BaseN */
code span.bu { color: #008000; } /* BuiltIn */
code span.cf { color: #007020; font-weight: bold; } /* ControlFlow */
code span.ch { color: #4070a0; } /* Char */
code span.cn { color: #880000; } /* Constant */
code span.co { color: #60a0b0; font-style: italic; } /* Comment */
code span.cv { color: #60a0b0; font-weight: bold; font-style: italic; } /* CommentVar */
code span.do { color: #ba2121; font-style: italic; } /* Documentation */
code span.dt { color: #902000; } /* DataType */
code span.dv { color: #40a070; } /* DecVal */
code span.er { color: #ff0000; font-weight: bold; } /* Error */
code span.ex { } /* Extension */
code span.fl { color: #40a070; } /* Float */
code span.fu { color: #06287e; } /* Function */
code span.im { color: #008000; font-weight: bold; } /* Import */
code span.in { color: #60a0b0; font-weight: bold; font-style: italic; } /* Information */
code span.kw { color: #007020; font-weight: bold; } /* Keyword */
code span.op { color: #666666; } /* Operator */
code span.ot { color: #007020; } /* Other */
code span.pp { color: #bc7a00; } /* Preprocessor */
code span.sc { color: #4070a0; } /* SpecialChar */
code span.ss { color: #bb6688; } /* SpecialString */
code span.st { color: #4070a0; } /* String */
code span.va { color: #19177c; } /* Variable */
code span.vs { color: #4070a0; } /* VerbatimString */
code span.wa { color: #60a0b0; font-weight: bold; font-style: italic; } /* Warning */

</style>
<script>
// apply pandoc div.sourceCode style to pre.sourceCode instead
(function() {
  var sheets = document.styleSheets;
  for (var i = 0; i < sheets.length; i++) {
    if (sheets[i].ownerNode.dataset["origin"] !== "pandoc") continue;
    try { var rules = sheets[i].cssRules; } catch (e) { continue; }
    var j = 0;
    while (j < rules.length) {
      var rule = rules[j];
      // check if there is a div.sourceCode rule
      if (rule.type !== rule.STYLE_RULE || rule.selectorText !== "div.sourceCode") {
        j++;
        continue;
      }
      var style = rule.style.cssText;
      // check if color or background-color is set
      if (rule.style.color === '' && rule.style.backgroundColor === '') {
        j++;
        continue;
      }
      // replace div.sourceCode by a pre.sourceCode rule
      sheets[i].deleteRule(j);
      sheets[i].insertRule('pre.sourceCode{' + style + '}', j);
    }
  }
})();
</script>

<style type="text/css">
  p.abstract{
    text-align: center;
    font-weight: bold;
  }
  div.abstract{
    margin: auto;
    width: 90%;
  }
</style>



<link rel="stylesheet" href="../R/styles.css" type="text/css" />



<style type = "text/css">
.main-container {
  max-width: 940px;
  margin-left: auto;
  margin-right: auto;
}
img {
  max-width:100%;
}
.tabbed-pane {
  padding-top: 12px;
}
.html-widget {
  margin-bottom: 20px;
}
button.code-folding-btn:focus {
  outline: none;
}
summary {
  display: list-item;
}
details > summary > p:only-child {
  display: inline;
}
pre code {
  padding: 0;
}
</style>



<!-- tabsets -->

<style type="text/css">
.tabset-dropdown > .nav-tabs {
  display: inline-table;
  max-height: 500px;
  min-height: 44px;
  overflow-y: auto;
  border: 1px solid #ddd;
  border-radius: 4px;
}

.tabset-dropdown > .nav-tabs > li.active:before, .tabset-dropdown > .nav-tabs.nav-tabs-open:before {
  content: "\e259";
  font-family: 'Glyphicons Halflings';
  display: inline-block;
  padding: 10px;
  border-right: 1px solid #ddd;
}

.tabset-dropdown > .nav-tabs.nav-tabs-open > li.active:before {
  content: "\e258";
  font-family: 'Glyphicons Halflings';
  border: none;
}

.tabset-dropdown > .nav-tabs > li.active {
  display: block;
}

.tabset-dropdown > .nav-tabs > li > a,
.tabset-dropdown > .nav-tabs > li > a:focus,
.tabset-dropdown > .nav-tabs > li > a:hover {
  border: none;
  display: inline-block;
  border-radius: 4px;
  background-color: transparent;
}

.tabset-dropdown > .nav-tabs.nav-tabs-open > li {
  display: block;
  float: none;
}

.tabset-dropdown > .nav-tabs > li {
  display: none;
}
</style>

<!-- code folding -->




</head>

<body>


<div class="container-fluid main-container">



<div class="header">
<!--#include virtual="/parts/header.txt"-->

</div>
<div class="advertisement">

<!--#include virtual="/parts/ad.txt"-->
<div class="adsense">
<script type="text/javascript"><!--
google_ad_client = "pub-1521343453876863";
/* 120x600, 作成済み 08/03/26 */
google_ad_slot = "6814144664";
google_ad_width = 120;
google_ad_height = 600;
//-->
</script>
<script type="text/javascript"
src="https://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
</div>

</div>

<div class="right">

<div id="rhs"><!--#include virtual="menu.txt"--></div>
<script>include_parts('rhs', 'https://wh.anlyznews.com/R/menu.txt');</script>

<div>
<!-- SiteSearch Google -->
<form method="get" action="https://www.google.co.jp/search">
<div style="text-align:center;">
<a href="https://www.google.co.jp/"><img src="https://www.google.com/logos/Logo_40wht.gif" border="0" alt="Google" align="absmiddle"/></a>

<input type="text" name="q" size="20" maxlength="255" value=""/>
<input type="hidden" name="hl" value="ja"/>
<input type="hidden" name="ie" value="UTF-8"/>
<input type="hidden" name="domains" value="wh.anlyznews.com"/>
<input type="submit" name="btnG" value="Google 検索"/><br/>
<div style="text-align:left;margin:8pt;0pt;0pt;0pt;font-size:10pt;line-height:11pt;">
<input type="radio" name="sitesearch" value=""/><span style="position:relative; top:-2pt;">WWWを検索</span><br/>
<input type="radio" name="sitesearch" value="wh.anlyznews.com" checked="true"/><span style="position:relative; top:-2pt;">サイト内を検索</span>
</div>
</div>
</form>
<!-- SiteSearch Google -->
</div>

</div>

<div class="article" id="article">

<div id="header">



<h1 class="title toc-ignore">Rのデータフレームのざっとした説明</h1>
<!--#include virtual="/parts/under_h2.txt"-->

<div>
<a href="https://b.hatena.ne.jp/entry/" class="hatena-bookmark-button" data-hatena-bookmark-layout="simple" title="このエントリーをはてなブックマークに追加"><img src="https://b.st-hatena.com/images/entry-button/button-only.gif" alt="このエントリーをはてなブックマークに追加" width="20" height="20" style="border: none;" /></a><script type="text/javascript" src="https://b.st-hatena.com/js/bookmark_button.js" charset="utf-8" async="async"></script>
<a class='mixi-check-button' data-button='button-1' data-key='956e750b5294c8e605d83627364938b17e5bbc2b' href='https://mixi.jp/share.pl'>Check</a><script src='https://static.mixi.jp/js/share.js' type='text/javascript'></script>
<script type="text/javascript" src="https://static.evernote.com/noteit.js"></script>
<a href="#" onclick="Evernote.doClip({contentId:'article'}); return false;"><img src="https://static.evernote.com/article-clipper.png" alt="Clip to Evernote" style="border:none;" border="0"/></a>
<a href="https://twitter.com/share?ref_src=twsrc%5Etfw" class="twitter-share-button" data-show-count="false">Tweet</a><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
<div class="line-it-button" data-lang="ja" data-type="share-c" data-env="REAL" data-url="https://wh.anlyznews.com/" data-color="default" data-size="small" data-count="false" data-ver="3" style="display: none;"></div>
<script src="https://www.line-website.com/social-plugins/js/thirdparty/loader.min.js" async="async" defer="defer"></script>
<div style="text-align:center;"><script type="text/javascript"><!--
google_ad_client = "ca-pub-1521343453876863";
/* H2下側 */
google_ad_slot = "1509061605";
google_ad_width = 468;
google_ad_height = 60;
//-->
</script>
<script type="text/javascript"
src="https://pagead2.googlesyndication.com/pagead/show_ads.js">
</script></div>
</div>

<p>標準関数を用いた統計解析で用いるデータ構造であるデータフレームの特色をつかみましょう。</p>

</div>

<div id="TOC">
<ul>
<li><a href="#リストとの違い" id="toc-リストとの違い"><span
class="toc-section-number">1</span> リストとの違い</a>
<ul>
<li><a href="#データフレームの欠点" id="toc-データフレームの欠点"><span
class="toc-section-number">1.1</span> データフレームの欠点</a></li>
</ul></li>
<li><a href="#行列との違い" id="toc-行列との違い"><span
class="toc-section-number">2</span> 行列との違い</a></li>
<li><a href="#デーフレームの作成" id="toc-デーフレームの作成"><span
class="toc-section-number">3</span> デーフレームの作成</a></li>
<li><a href="#ファイルio" id="toc-ファイルio"><span
class="toc-section-number">4</span> ファイルI/O</a>
<ul>
<li><a href="#テキストファイルに保存"
id="toc-テキストファイルに保存"><span
class="toc-section-number">4.1</span> テキストファイルに保存</a></li>
<li><a href="#テキストファイルから読み込む"
id="toc-テキストファイルから読み込む"><span
class="toc-section-number">4.2</span> テキストファイルから読み込む</a>
<ul>
<li><a href="#数値が文字列として認識されたとき"
id="toc-数値が文字列として認識されたとき"><span
class="toc-section-number">4.2.1</span>
数値が文字列として認識されたとき</a></li>
</ul></li>
</ul></li>
<li><a href="#サブセットの作成" id="toc-サブセットの作成"><span
class="toc-section-number">5</span> サブセットの作成</a>
<ul>
<li><a href="#頭n行末尾n行" id="toc-頭n行末尾n行"><span
class="toc-section-number">5.1</span> 頭n行，末尾n行</a></li>
<li><a href="#欠損データの除外" id="toc-欠損データの除外"><span
class="toc-section-number">5.2</span> 欠損データの除外</a></li>
</ul></li>
<li><a href="#ソート" id="toc-ソート"><span
class="toc-section-number">6</span> ソート</a></li>
<li><a href="#列の追加" id="toc-列の追加"><span
class="toc-section-number">7</span> 列の追加</a></li>
<li><a href="#データフレームの結合" id="toc-データフレームの結合"><span
class="toc-section-number">8</span> データフレームの結合</a></li>
<li><a href="#データフレームの分割" id="toc-データフレームの分割"><span
class="toc-section-number">9</span> データフレームの分割</a></li>
</ul>
</div>

<p>Rのデータフレームは、リストのように異なる型をまとめることができ、行列のように参照や代入ができる、統計解析によく適したデータ構造です。表の型式でデータを保持できます。標準で使えるため、ビルトイン関数などで広く用いられています。</p>
<div id="リストとの違い" class="section level1" number="1">
<h1><span class="header-section-number">1</span> リストとの違い</h1>
<p>データフレームの便利さを理解するために、リストの不便さを理解しましょう。リストをつくって、i行j列を参照してみるとします。</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode r"><code class="sourceCode r"><span id="cb1-1"><a href="#cb1-1" tabindex="-1"></a>lst01 <span class="ot">&lt;-</span> <span class="fu">with</span>(<span class="fu">new.env</span>(), {</span>
<span id="cb1-2"><a href="#cb1-2" tabindex="-1"></a>    n <span class="ot">&lt;-</span> <span class="dv">100</span></span>
<span id="cb1-3"><a href="#cb1-3" tabindex="-1"></a>    x <span class="ot">&lt;-</span> <span class="fu">runif</span>(n)</span>
<span id="cb1-4"><a href="#cb1-4" tabindex="-1"></a>    z <span class="ot">&lt;-</span> <span class="fu">runif</span>(n)</span>
<span id="cb1-5"><a href="#cb1-5" tabindex="-1"></a>    kn <span class="ot">&lt;-</span> <span class="fu">round</span>(<span class="fu">runif</span>(n, <span class="at">min =</span> <span class="fl">0.5</span>, <span class="at">max =</span> <span class="fl">3.5</span>))</span>
<span id="cb1-6"><a href="#cb1-6" tabindex="-1"></a>    k <span class="ot">&lt;-</span> <span class="fu">as.factor</span>(letters[kn])</span>
<span id="cb1-7"><a href="#cb1-7" tabindex="-1"></a>    y <span class="ot">&lt;-</span> <span class="dv">1</span> <span class="sc">+</span> x <span class="sc">-</span> z <span class="sc">+</span> (kn<span class="sc">==</span><span class="dv">2</span>)<span class="sc">*</span><span class="dv">1</span> <span class="sc">+</span> <span class="fu">rnorm</span>(n)</span>
<span id="cb1-8"><a href="#cb1-8" tabindex="-1"></a>    r <span class="ot">&lt;-</span> <span class="fu">list</span>(y, x, z, k)</span>
<span id="cb1-9"><a href="#cb1-9" tabindex="-1"></a>    <span class="fu">names</span>(r) <span class="ot">&lt;-</span> <span class="fu">c</span>(<span class="st">&quot;y&quot;</span>, <span class="st">&quot;x&quot;</span>, <span class="st">&quot;z&quot;</span>, <span class="st">&quot;k&quot;</span>)</span>
<span id="cb1-10"><a href="#cb1-10" tabindex="-1"></a>    r</span>
<span id="cb1-11"><a href="#cb1-11" tabindex="-1"></a>})</span></code></pre></div>
<p>慣れていれば</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode r"><code class="sourceCode r"><span id="cb2-1"><a href="#cb2-1" tabindex="-1"></a>i <span class="ot">&lt;-</span> <span class="dv">2</span>; j <span class="ot">&lt;-</span> <span class="dv">3</span></span>
<span id="cb2-2"><a href="#cb2-2" tabindex="-1"></a>lst01[[j]][i]</span></code></pre></div>
<pre><code>[1] 0.3167571</code></pre>
<div class="sourceCode" id="cb4"><pre class="sourceCode r"><code class="sourceCode r"><span id="cb4-1"><a href="#cb4-1" tabindex="-1"></a>lst01<span class="sc">$</span>z[i]</span></code></pre></div>
<pre><code>[1] 0.3167571</code></pre>
<p>行列のように<code>lst01[i, j]</code>と言う風には参照できません。<span
class="math inline">\(i\)</span>行目のサブセットをつくろうと思うと、<code>lst01[i, ]</code>と言う風には参照できないので、</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode r"><code class="sourceCode r"><span id="cb6-1"><a href="#cb6-1" tabindex="-1"></a><span class="fu">sapply</span>(<span class="fu">names</span>(lst01), \(cn){</span>
<span id="cb6-2"><a href="#cb6-2" tabindex="-1"></a>    lst01[[cn]][i]</span>
<span id="cb6-3"><a href="#cb6-3" tabindex="-1"></a>})</span></code></pre></div>
<pre><code>        y         x         z         k 
0.2543368 0.2747747 0.3167571 1.0000000 </code></pre>
<p>と書くことになります。代入も同様で、気軽にできません。</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode r"><code class="sourceCode r"><span id="cb8-1"><a href="#cb8-1" tabindex="-1"></a>X <span class="ot">&lt;-</span> <span class="fu">c</span>(<span class="fl">0.78</span>, <span class="fl">0.92</span>, <span class="fl">0.19</span>, <span class="st">&quot;c&quot;</span>)</span>
<span id="cb8-2"><a href="#cb8-2" tabindex="-1"></a><span class="cf">for</span>(j <span class="cf">in</span> <span class="dv">1</span><span class="sc">:</span><span class="fu">length</span>(lst01)){</span>
<span id="cb8-3"><a href="#cb8-3" tabindex="-1"></a>    lst01[[j]][i] <span class="ot">&lt;-</span> X[j]</span>
<span id="cb8-4"><a href="#cb8-4" tabindex="-1"></a>}</span></code></pre></div>
<p>データフレームは内部的にはリストの拡張となっているので、リストは簡単にデータフレームに変換できます。変換すると</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode r"><code class="sourceCode r"><span id="cb9-1"><a href="#cb9-1" tabindex="-1"></a>df01 <span class="ot">&lt;-</span> <span class="fu">as.data.frame</span>(lst01)</span>
<span id="cb9-2"><a href="#cb9-2" tabindex="-1"></a>df01[i, j]</span></code></pre></div>
<pre><code>[1] c
Levels: a b c</code></pre>
<div class="sourceCode" id="cb11"><pre class="sourceCode r"><code class="sourceCode r"><span id="cb11-1"><a href="#cb11-1" tabindex="-1"></a>df01[i, ]</span></code></pre></div>
<pre><code>     y    x    z k
2 0.78 0.92 0.19 c</code></pre>
<div class="sourceCode" id="cb13"><pre class="sourceCode r"><code class="sourceCode r"><span id="cb13-1"><a href="#cb13-1" tabindex="-1"></a>df01[i, ] <span class="ot">&lt;-</span> X</span></code></pre></div>
<p>という風に、行列と同様に簡潔に操作ができるようになります。</p>
<p>ウィンドウ・アプリケーション開発などではリスト構造のデータが便利だったりするのですが、そのままでは統計解析では煩雑で、データフレームでは便利です。1990年代ではSとそのクローンであるRぐらいでしか見られないものですが、近年ではR以外のプログラミング言語でも統計解析を行うパッケージなどではデータフレームを実装するようになっており、コンセプトの正しさが示されています。</p>
<div id="データフレームの欠点" class="section level2" number="1.1">
<h2><span class="header-section-number">1.1</span>
データフレームの欠点</h2>
<p>リストは要素としてリストやデータフレームを入れられますが、データフレームはデータ構造を入れることができません。</p>
</div>
</div>
<div id="行列との違い" class="section level1" number="2">
<h1><span class="header-section-number">2</span> 行列との違い</h1>
<p>行列と同様に操作ができるようになっており、<code>nrow</code>，<code>ncol</code>，<code>rbind</code>，<code>cbind</code>といった関数もそのまま使えます。一方、行列は一次元ベクトルに属性で次元の情報を加えたものなので、一次元ベクトルとして操作することもできますが、データフレームはリストに属性をつけたものなのでそれは出来ません。</p>
</div>
<div id="デーフレームの作成" class="section level1" number="3">
<h1><span class="header-section-number">3</span> デーフレームの作成</h1>
<p>上の例ではリストを<code>as.dataframe</code>でデータフレーム化しましたが、ベクトルをつないで作ることもできます。</p>
<div class="sourceCode" id="cb14"><pre class="sourceCode r"><code class="sourceCode r"><span id="cb14-1"><a href="#cb14-1" tabindex="-1"></a>df02 <span class="ot">&lt;-</span> <span class="fu">data.frame</span>(<span class="at">k =</span> <span class="fu">c</span>(<span class="st">&quot;a&quot;</span>, <span class="st">&quot;b&quot;</span>, <span class="st">&quot;c&quot;</span>), <span class="at">v =</span> <span class="fu">c</span>(<span class="dv">1</span>, <span class="dv">10</span>, <span class="dv">100</span>))</span></code></pre></div>
</div>
<div id="ファイルio" class="section level1" number="4">
<h1><span class="header-section-number">4</span> ファイルI/O</h1>
<p>データフレームは表なので、CSVファイルやタブ区切りのファイルでの保存が可能です<a
href="#fn1" class="footnote-ref"
id="fnref1"><sup>1</sup></a>。逆に、CSVファイルやタブ区切りのファイルを読み込むのに過不足ない機能を提供します。リストは複雑な構造にもなりうるためできません。行列もデータ型が一種類になるためできません。統計データの多くは表形式のテキストファイル型式で提供されることもあり、RのファイルI/Oではデータフレームが多く用いられることになります<a
href="#fn2" class="footnote-ref" id="fnref2"><sup>2</sup></a>。</p>
<div id="テキストファイルに保存" class="section level2" number="4.1">
<h2><span class="header-section-number">4.1</span>
テキストファイルに保存</h2>
<p>テキストファイルとしてデータフレームを保存する場合は、<code>write.table</code>を使います。</p>
<div class="sourceCode" id="cb15"><pre class="sourceCode r"><code class="sourceCode r"><span id="cb15-1"><a href="#cb15-1" tabindex="-1"></a><span class="fu">write.table</span>(df01, <span class="at">file =</span> <span class="st">&quot;df01.csv&quot;</span>, <span class="at">sep =</span> <span class="st">&quot;,&quot;</span>, <span class="at">row.names =</span> <span class="cn">FALSE</span>)</span></code></pre></div>
<p>タブ区切りの場合は<code>sep = "\t"</code>となります。標準では<code>rownames</code>で参照できる行名を出力しようとするので、<code>row.names = FALSE</code>で抑制しています。</p>
<p>旧いシステムだと標準ではutf-8での出力にならないことには注意しましょう。</p>
</div>
<div id="テキストファイルから読み込む" class="section level2"
number="4.2">
<h2><span class="header-section-number">4.2</span>
テキストファイルから読み込む</h2>
<p>読み込むときは、<code>read.table</code>を使います。</p>
<div class="sourceCode" id="cb16"><pre class="sourceCode r"><code class="sourceCode r"><span id="cb16-1"><a href="#cb16-1" tabindex="-1"></a>df01 <span class="ot">&lt;-</span> <span class="fu">read.table</span>(<span class="st">&quot;df01.csv&quot;</span>, <span class="at">sep =</span> <span class="st">&quot;,&quot;</span>, <span class="at">header =</span> <span class="cn">TRUE</span>)</span></code></pre></div>
<p>標準では先頭行が列名として認識しないので、<code>header = TRUE</code>をつけています。</p>
<p>オプションは多様に取れますが、欠損値は<code>NA</code>が入ること、<code>#</code>からはじまる行はコメントとして無視されること、<code>fileEncoding</code>で文字コード指定ができること<a
href="#fn3" class="footnote-ref"
id="fnref3"><sup>3</sup></a>、引数<code>skip</code>で先頭から何行かを飛ばすことぐらいを知っておくと、<code>?read.table</code>でヘルプを見なくても済むことが多いと思います。</p>
<div id="数値が文字列として認識されたとき" class="section level3"
number="4.2.1">
<h3><span class="header-section-number">4.2.1</span>
数値が文字列として認識されたとき</h3>
<p>表計算で保存したテキストファイルは、数値データがダブルコーテーションでくくったカンマ付き文字列になっているときがありますが、</p>
<div class="sourceCode" id="cb17"><pre class="sourceCode r"><code class="sourceCode r"><span id="cb17-1"><a href="#cb17-1" tabindex="-1"></a>df01<span class="sc">$</span>y <span class="ot">&lt;-</span> <span class="fu">as.numeric</span>(<span class="fu">gsub</span>(<span class="st">&quot;,&quot;</span>, <span class="st">&quot;&quot;</span>, df01<span class="sc">$</span>y))</span></code></pre></div>
<p>と言うように<code>gsub</code>などで置換をしてカンマを消して、<code>as.numeric</code>で型を変換してしまえばよいです。</p>
<p>なお、引数<code>colClasses</code>で型指定ができますが、<code>as.*</code>関数群で変換できる程度しか融通が利かないです。</p>
</div>
</div>
</div>
<div id="サブセットの作成" class="section level1" number="5">
<h1><span class="header-section-number">5</span> サブセットの作成</h1>
<p>行列と同様に行番号や列番号を指定すれば、その番号のサブセットができます。</p>
<div class="sourceCode" id="cb18"><pre class="sourceCode r"><code class="sourceCode r"><span id="cb18-1"><a href="#cb18-1" tabindex="-1"></a><span class="co"># yがゼロ以下の行を抽出</span></span>
<span id="cb18-2"><a href="#cb18-2" tabindex="-1"></a>df01[df01<span class="sc">$</span>y <span class="sc">&lt;=</span> <span class="dv">0</span>, ]</span>
<span id="cb18-3"><a href="#cb18-3" tabindex="-1"></a><span class="co"># yがゼロより大きく1以下の行を抽出</span></span>
<span id="cb18-4"><a href="#cb18-4" tabindex="-1"></a>df01[df01<span class="sc">$</span>y <span class="sc">&gt;</span> <span class="dv">0</span> <span class="sc">&amp;</span> df01<span class="sc">$</span>y <span class="sc">&lt;=</span> <span class="dv">1</span>, ]</span>
<span id="cb18-5"><a href="#cb18-5" tabindex="-1"></a><span class="co"># y列とk列を抽出</span></span>
<span id="cb18-6"><a href="#cb18-6" tabindex="-1"></a>df01[, <span class="fu">c</span>(<span class="st">&quot;y&quot;</span>, <span class="st">&quot;k&quot;</span>)]</span></code></pre></div>
<p><code>subset</code>をつかうと、行の抽出がすっきり書けます。</p>
<div class="sourceCode" id="cb19"><pre class="sourceCode r"><code class="sourceCode r"><span id="cb19-1"><a href="#cb19-1" tabindex="-1"></a><span class="fu">subset</span>(df01, y <span class="sc">&lt;=</span> <span class="dv">0</span>)</span></code></pre></div>
<div id="頭n行末尾n行" class="section level2" number="5.1">
<h2><span class="header-section-number">5.1</span> 頭n行，末尾n行</h2>
<p>ベクトルと行列でも使えるのですが、頭n行を抽出する<code>head</code>と、末尾n行を抽出する<code>tail</code>データフレームの状態確認に便利です。</p>
<div class="sourceCode" id="cb20"><pre class="sourceCode r"><code class="sourceCode r"><span id="cb20-1"><a href="#cb20-1" tabindex="-1"></a><span class="fu">head</span>(df01, <span class="dv">11</span>) <span class="co"># 頭から11行を抽出</span></span>
<span id="cb20-2"><a href="#cb20-2" tabindex="-1"></a><span class="fu">tail</span>(df01, <span class="dv">11</span>) <span class="co"># 末尾から11行を抽出</span></span></code></pre></div>
</div>
<div id="欠損データの除外" class="section level2" number="5.2">
<h2><span class="header-section-number">5.2</span> 欠損データの除外</h2>
<p>欠損値がない行を<code>TRUE</code>とする<code>complete.cases</code>を使うと簡単です。</p>
<div class="sourceCode" id="cb21"><pre class="sourceCode r"><code class="sourceCode r"><span id="cb21-1"><a href="#cb21-1" tabindex="-1"></a><span class="fu">subset</span>(df01, <span class="fu">complete.cases</span>(df01))</span></code></pre></div>
</div>
</div>
<div id="ソート" class="section level1" number="6">
<h1><span class="header-section-number">6</span> ソート</h1>
<p>行列でソートすることは稀だと思いますが、データフレームは行列と同様にソートできます。添字で指定した行番号の順序で並び替えたデータフレームが得られるので、<code>order</code>で順序をつくって指定します。</p>
<div class="sourceCode" id="cb22"><pre class="sourceCode r"><code class="sourceCode r"><span id="cb22-1"><a href="#cb22-1" tabindex="-1"></a><span class="co"># k列で昇順ソート</span></span>
<span id="cb22-2"><a href="#cb22-2" tabindex="-1"></a>df01[<span class="fu">order</span>(df01<span class="sc">$</span>k), ]</span>
<span id="cb22-3"><a href="#cb22-3" tabindex="-1"></a><span class="co"># k列で昇順、y列で降順ソート</span></span>
<span id="cb22-4"><a href="#cb22-4" tabindex="-1"></a>df01[<span class="fu">order</span>(df01<span class="sc">$</span>k, df01<span class="sc">$</span>y, <span class="at">decreasing =</span> <span class="fu">c</span>(<span class="cn">FALSE</span>, <span class="cn">TRUE</span>), <span class="at">method =</span> <span class="st">&quot;radix&quot;</span>), ]</span></code></pre></div>
</div>
<div id="列の追加" class="section level1" number="7">
<h1><span class="header-section-number">7</span> 列の追加</h1>
<p>データフレームの行数と同じ長さのベクトルを、新たな列名を指定して代入すると列の追加になります。</p>
<div class="sourceCode" id="cb23"><pre class="sourceCode r"><code class="sourceCode r"><span id="cb23-1"><a href="#cb23-1" tabindex="-1"></a>df01<span class="sc">$</span>n <span class="ot">&lt;-</span> <span class="dv">1</span><span class="sc">:</span><span class="fu">nrow</span>(df01)</span></code></pre></div>
</div>
<div id="データフレームの結合" class="section level1" number="8">
<h1><span class="header-section-number">8</span>
データフレームの結合</h1>
<p>IDなどのキー列をつきあわせて、二つのデータフレームを結合させることができます。</p>
<p>標準では二つのデータフレームで同じ名前の列がキーとして使われます。</p>
<div class="sourceCode" id="cb24"><pre class="sourceCode r"><code class="sourceCode r"><span id="cb24-1"><a href="#cb24-1" tabindex="-1"></a><span class="fu">merge</span>(df01, df02)</span></code></pre></div>
<p>突き合せにつかうキー列の列名が二つのデータフレームで異なる場合は、それぞれ指定します。</p>
<div class="sourceCode" id="cb25"><pre class="sourceCode r"><code class="sourceCode r"><span id="cb25-1"><a href="#cb25-1" tabindex="-1"></a>df03 <span class="ot">&lt;-</span> <span class="fu">data.frame</span>(<span class="at">m =</span> <span class="fu">c</span>(<span class="st">&quot;a&quot;</span>, <span class="st">&quot;b&quot;</span>, <span class="st">&quot;c&quot;</span>), <span class="at">v =</span> <span class="fu">c</span>(<span class="dv">1</span>, <span class="dv">10</span>, <span class="dv">100</span>))</span>
<span id="cb25-2"><a href="#cb25-2" tabindex="-1"></a><span class="fu">merge</span>(df01, df03, <span class="at">by.x =</span> <span class="st">&quot;k&quot;</span>, <span class="at">by.y =</span> <span class="st">&quot;m&quot;</span>)</span></code></pre></div>
</div>
<div id="データフレームの分割" class="section level1" number="9">
<h1><span class="header-section-number">9</span>
データフレームの分割</h1>
<p>ベクトルをキーにしたデータフレームの分割は<code>split</code>で簡単にできます。</p>
<p>データフレームの列を使う場合や、多次元に分割する場合はモデル式を使うのが簡単です。</p>
<div class="sourceCode" id="cb26"><pre class="sourceCode r"><code class="sourceCode r"><span id="cb26-1"><a href="#cb26-1" tabindex="-1"></a>df_split <span class="ot">&lt;-</span> <span class="fu">split</span>(df01, <span class="sc">~</span>k)</span></code></pre></div>
<p>行数を確認すると、合計100行になっています。</p>
<div class="sourceCode" id="cb27"><pre class="sourceCode r"><code class="sourceCode r"><span id="cb27-1"><a href="#cb27-1" tabindex="-1"></a><span class="cf">for</span>(i <span class="cf">in</span> <span class="dv">1</span><span class="sc">:</span><span class="fu">length</span>(df_split)){</span>
<span id="cb27-2"><a href="#cb27-2" tabindex="-1"></a>    <span class="fu">print</span>(<span class="fu">sprintf</span>(<span class="st">&quot;%sは%d行&quot;</span>, <span class="fu">names</span>(df_split)[i], <span class="fu">nrow</span>(df_split[[i]])))</span>
<span id="cb27-3"><a href="#cb27-3" tabindex="-1"></a>}</span></code></pre></div>
<pre><code>[1] &quot;aは30行&quot;
[1] &quot;bは36行&quot;
[1] &quot;cは34行&quot;</code></pre>
<p>モデル式ではなく、ベクトルで指定する事もできます。偶奇でわけてみましょう。</p>
<div class="sourceCode" id="cb29"><pre class="sourceCode r"><code class="sourceCode r"><span id="cb29-1"><a href="#cb29-1" tabindex="-1"></a>oe <span class="ot">&lt;-</span> <span class="fu">c</span>(<span class="st">&quot;even&quot;</span>, <span class="st">&quot;odd&quot;</span>)[<span class="dv">1</span> <span class="sc">+</span> (<span class="dv">1</span><span class="sc">:</span><span class="fu">nrow</span>(df01)) <span class="sc">%%</span> <span class="dv">2</span>]</span>
<span id="cb29-2"><a href="#cb29-2" tabindex="-1"></a>(df_oe <span class="ot">&lt;-</span> <span class="fu">split</span>(df01, oe))</span></code></pre></div>
</div>
<div class="footnotes footnotes-end-of-document">
<hr />
<ol>
<li id="fn1"><p><code>saveRDS</code>できないわけではないです。<a
href="#fnref1" class="footnote-back">↩︎</a></p></li>
<li
id="fn2"><p>表形式ではないテキストファイルや、バイナリー型式のファイルも扱えます。<a
href="#fnref2" class="footnote-back">↩︎</a></p></li>
<li
id="fn3"><p>Windowsの標準であった<code>shift-jis</code>と、現在は一般的な<code>utf-8</code>以外を指定することはまず無いと思いますが、<code>euc-jp</code>なども取れます。扱えるエンコードは<code>iconvluist()</code>で確認できます。<a
href="#fnref3" class="footnote-back">↩︎</a></p></li>
</ol>
</div>

</div>
<div class="footer" id="footer"><!--#include virtual="/parts/footer.txt"--></div>
<script>include_parts('footer', 'https://wh.anlyznews.com/parts/footer.txt');</script>



</div>

<script>

// add bootstrap table styles to pandoc tables
function bootstrapStylePandocTables() {
  $('tr.odd').parent('tbody').parent('table').addClass('table table-condensed');
}
$(document).ready(function () {
  bootstrapStylePandocTables();
});


</script>

<!-- tabsets -->

<script>
$(document).ready(function () {
  window.buildTabsets("TOC");
});

$(document).ready(function () {
  $('.tabset-dropdown > .nav-tabs > li').click(function () {
    $(this).parent().toggleClass('nav-tabs-open');
  });
});
</script>

<!-- code folding -->


<script id="MathJax-script" async
  src="https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-svg.js">
</script>

</body>
</html>
