<!DOCTYPE html>

<html>

<head>

<meta charset="utf-8" />
<meta name="generator" content="pandoc" />
<meta http-equiv="X-UA-Compatible" content="IE=EDGE" />




<title>属性の付与によるデータ構造の変換</title>

<script src="common_files/header-attrs-2.25/header-attrs.js"></script>
<script src="common_files/jquery-3.6.0/jquery-3.6.0.min.js"></script>
<meta name="viewport" content="width=device-width, initial-scale=1" />
<link href="common_files/bootstrap-3.3.5/css/bootstrap.min.css" rel="stylesheet" />
<script src="common_files/bootstrap-3.3.5/js/bootstrap.min.js"></script>
<script src="common_files/bootstrap-3.3.5/shim/html5shiv.min.js"></script>
<script src="common_files/bootstrap-3.3.5/shim/respond.min.js"></script>
<style>h1 {font-size: 34px;}
       h1.title {font-size: 38px;}
       h2 {font-size: 30px;}
       h3 {font-size: 24px;}
       h4 {font-size: 18px;}
       h5 {font-size: 16px;}
       h6 {font-size: 12px;}
       code {color: inherit; background-color: rgba(0, 0, 0, 0.04);}
       pre:not([class]) { background-color: white }</style>
<script src="common_files/navigation-1.1/tabsets.js"></script>
<meta name="ROBOTS" content="INDEX,FOLLOW"/>
<link href='http://www.hatena.ne.jp/uncorrelated/' rel='author'/>
<link rel="SHORTCUT ICON" href="/img/miniicon.ico"/>
<script type="text/javascript">

  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-10387742-4']);
  _gaq.push(['_trackPageview']);

  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();
</script>
<script src="/parts/include_parts.js"></script>

<style type="text/css">
  code{white-space: pre-wrap;}
  span.smallcaps{font-variant: small-caps;}
  span.underline{text-decoration: underline;}
  div.column{display: inline-block; vertical-align: top; width: 50%;}
  div.hanging-indent{margin-left: 1.5em; text-indent: -1.5em;}
  ul.task-list{list-style: none;}
    </style>



<style type="text/css">
  code {
    white-space: pre;
  }
  .sourceCode {
    overflow: visible;
  }
</style>
<style type="text/css" data-origin="pandoc">
pre > code.sourceCode { white-space: pre; position: relative; }
pre > code.sourceCode > span { line-height: 1.25; }
pre > code.sourceCode > span:empty { height: 1.2em; }
.sourceCode { overflow: visible; }
code.sourceCode > span { color: inherit; text-decoration: inherit; }
div.sourceCode { margin: 1em 0; }
pre.sourceCode { margin: 0; }
@media screen {
div.sourceCode { overflow: auto; }
}
@media print {
pre > code.sourceCode { white-space: pre-wrap; }
pre > code.sourceCode > span { text-indent: -5em; padding-left: 5em; }
}
pre.numberSource code
  { counter-reset: source-line 0; }
pre.numberSource code > span
  { position: relative; left: -4em; counter-increment: source-line; }
pre.numberSource code > span > a:first-child::before
  { content: counter(source-line);
    position: relative; left: -1em; text-align: right; vertical-align: baseline;
    border: none; display: inline-block;
    -webkit-touch-callout: none; -webkit-user-select: none;
    -khtml-user-select: none; -moz-user-select: none;
    -ms-user-select: none; user-select: none;
    padding: 0 4px; width: 4em;
    color: #aaaaaa;
  }
pre.numberSource { margin-left: 3em; border-left: 1px solid #aaaaaa;  padding-left: 4px; }
div.sourceCode
  {   }
@media screen {
pre > code.sourceCode > span > a:first-child::before { text-decoration: underline; }
}
code span.al { color: #ff0000; font-weight: bold; } /* Alert */
code span.an { color: #60a0b0; font-weight: bold; font-style: italic; } /* Annotation */
code span.at { color: #7d9029; } /* Attribute */
code span.bn { color: #40a070; } /* BaseN */
code span.bu { color: #008000; } /* BuiltIn */
code span.cf { color: #007020; font-weight: bold; } /* ControlFlow */
code span.ch { color: #4070a0; } /* Char */
code span.cn { color: #880000; } /* Constant */
code span.co { color: #60a0b0; font-style: italic; } /* Comment */
code span.cv { color: #60a0b0; font-weight: bold; font-style: italic; } /* CommentVar */
code span.do { color: #ba2121; font-style: italic; } /* Documentation */
code span.dt { color: #902000; } /* DataType */
code span.dv { color: #40a070; } /* DecVal */
code span.er { color: #ff0000; font-weight: bold; } /* Error */
code span.ex { } /* Extension */
code span.fl { color: #40a070; } /* Float */
code span.fu { color: #06287e; } /* Function */
code span.im { color: #008000; font-weight: bold; } /* Import */
code span.in { color: #60a0b0; font-weight: bold; font-style: italic; } /* Information */
code span.kw { color: #007020; font-weight: bold; } /* Keyword */
code span.op { color: #666666; } /* Operator */
code span.ot { color: #007020; } /* Other */
code span.pp { color: #bc7a00; } /* Preprocessor */
code span.sc { color: #4070a0; } /* SpecialChar */
code span.ss { color: #bb6688; } /* SpecialString */
code span.st { color: #4070a0; } /* String */
code span.va { color: #19177c; } /* Variable */
code span.vs { color: #4070a0; } /* VerbatimString */
code span.wa { color: #60a0b0; font-weight: bold; font-style: italic; } /* Warning */

</style>
<script>
// apply pandoc div.sourceCode style to pre.sourceCode instead
(function() {
  var sheets = document.styleSheets;
  for (var i = 0; i < sheets.length; i++) {
    if (sheets[i].ownerNode.dataset["origin"] !== "pandoc") continue;
    try { var rules = sheets[i].cssRules; } catch (e) { continue; }
    var j = 0;
    while (j < rules.length) {
      var rule = rules[j];
      // check if there is a div.sourceCode rule
      if (rule.type !== rule.STYLE_RULE || rule.selectorText !== "div.sourceCode") {
        j++;
        continue;
      }
      var style = rule.style.cssText;
      // check if color or background-color is set
      if (rule.style.color === '' && rule.style.backgroundColor === '') {
        j++;
        continue;
      }
      // replace div.sourceCode by a pre.sourceCode rule
      sheets[i].deleteRule(j);
      sheets[i].insertRule('pre.sourceCode{' + style + '}', j);
    }
  }
})();
</script>

<style type="text/css">
  p.abstract{
    text-align: center;
    font-weight: bold;
  }
  div.abstract{
    margin: auto;
    width: 90%;
  }
</style>



<link rel="stylesheet" href="../R/styles.css" type="text/css" />



<style type = "text/css">
.main-container {
  max-width: 940px;
  margin-left: auto;
  margin-right: auto;
}
img {
  max-width:100%;
}
.tabbed-pane {
  padding-top: 12px;
}
.html-widget {
  margin-bottom: 20px;
}
button.code-folding-btn:focus {
  outline: none;
}
summary {
  display: list-item;
}
details > summary > p:only-child {
  display: inline;
}
pre code {
  padding: 0;
}
</style>



<!-- tabsets -->

<style type="text/css">
.tabset-dropdown > .nav-tabs {
  display: inline-table;
  max-height: 500px;
  min-height: 44px;
  overflow-y: auto;
  border: 1px solid #ddd;
  border-radius: 4px;
}

.tabset-dropdown > .nav-tabs > li.active:before, .tabset-dropdown > .nav-tabs.nav-tabs-open:before {
  content: "\e259";
  font-family: 'Glyphicons Halflings';
  display: inline-block;
  padding: 10px;
  border-right: 1px solid #ddd;
}

.tabset-dropdown > .nav-tabs.nav-tabs-open > li.active:before {
  content: "\e258";
  font-family: 'Glyphicons Halflings';
  border: none;
}

.tabset-dropdown > .nav-tabs > li.active {
  display: block;
}

.tabset-dropdown > .nav-tabs > li > a,
.tabset-dropdown > .nav-tabs > li > a:focus,
.tabset-dropdown > .nav-tabs > li > a:hover {
  border: none;
  display: inline-block;
  border-radius: 4px;
  background-color: transparent;
}

.tabset-dropdown > .nav-tabs.nav-tabs-open > li {
  display: block;
  float: none;
}

.tabset-dropdown > .nav-tabs > li {
  display: none;
}
</style>

<!-- code folding -->




</head>

<body>


<div class="container-fluid main-container">



<div class="header">
<!--#include virtual="/parts/header.txt"-->

</div>
<div class="advertisement">

<!--#include virtual="/parts/ad.txt"-->
<div class="adsense">
<script type="text/javascript"><!--
google_ad_client = "pub-1521343453876863";
/* 120x600, 作成済み 08/03/26 */
google_ad_slot = "6814144664";
google_ad_width = 120;
google_ad_height = 600;
//-->
</script>
<script type="text/javascript"
src="https://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
</div>

</div>

<div class="right">

<div id="rhs"><!--#include virtual="menu.txt"--></div>
<script>include_parts('rhs', 'https://wh.anlyznews.com/R/menu.txt');</script>

<div>
<!-- SiteSearch Google -->
<form method="get" action="https://www.google.co.jp/search">
<div style="text-align:center;">
<a href="https://www.google.co.jp/"><img src="https://www.google.com/logos/Logo_40wht.gif" border="0" alt="Google" align="absmiddle"/></a>

<input type="text" name="q" size="20" maxlength="255" value=""/>
<input type="hidden" name="hl" value="ja"/>
<input type="hidden" name="ie" value="UTF-8"/>
<input type="hidden" name="domains" value="wh.anlyznews.com"/>
<input type="submit" name="btnG" value="Google 検索"/><br/>
<div style="text-align:left;margin:8pt;0pt;0pt;0pt;font-size:10pt;line-height:11pt;">
<input type="radio" name="sitesearch" value=""/><span style="position:relative; top:-2pt;">WWWを検索</span><br/>
<input type="radio" name="sitesearch" value="wh.anlyznews.com" checked="true"/><span style="position:relative; top:-2pt;">サイト内を検索</span>
</div>
</div>
</form>
<!-- SiteSearch Google -->
</div>

</div>

<div class="article" id="article">

<div id="header">



<h1 class="title toc-ignore">属性の付与によるデータ構造の変換</h1>
<!--#include virtual="/parts/under_h2.txt"-->

<div>
<a href="https://b.hatena.ne.jp/entry/" class="hatena-bookmark-button" data-hatena-bookmark-layout="simple" title="このエントリーをはてなブックマークに追加"><img src="https://b.st-hatena.com/images/entry-button/button-only.gif" alt="このエントリーをはてなブックマークに追加" width="20" height="20" style="border: none;" /></a><script type="text/javascript" src="https://b.st-hatena.com/js/bookmark_button.js" charset="utf-8" async="async"></script>
<a class='mixi-check-button' data-button='button-1' data-key='956e750b5294c8e605d83627364938b17e5bbc2b' href='https://mixi.jp/share.pl'>Check</a><script src='https://static.mixi.jp/js/share.js' type='text/javascript'></script>
<script type="text/javascript" src="https://static.evernote.com/noteit.js"></script>
<a href="#" onclick="Evernote.doClip({contentId:'article'}); return false;"><img src="https://static.evernote.com/article-clipper.png" alt="Clip to Evernote" style="border:none;" border="0"/></a>
<a href="https://twitter.com/share?ref_src=twsrc%5Etfw" class="twitter-share-button" data-show-count="false">Tweet</a><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
<div class="line-it-button" data-lang="ja" data-type="share-c" data-env="REAL" data-url="https://wh.anlyznews.com/" data-color="default" data-size="small" data-count="false" data-ver="3" style="display: none;"></div>
<script src="https://www.line-website.com/social-plugins/js/thirdparty/loader.min.js" async="async" defer="defer"></script>
<div style="text-align:center;"><script type="text/javascript"><!--
google_ad_client = "ca-pub-1521343453876863";
/* H2下側 */
google_ad_slot = "1509061605";
google_ad_width = 468;
google_ad_height = 60;
//-->
</script>
<script type="text/javascript"
src="https://pagead2.googlesyndication.com/pagead/show_ads.js">
</script></div>
</div>

<p>Rが独特なプログラミング言語である理由の1つは、基本的なデータ構造がvectorとlistの2種類しかなく、matrixやdata.frameなど他のクラスのデータ構造がvectorとlistにつけたattributeによって定まるところです。最初から意識する必要はないですが、Rの理解向上にはなるので、ぽちぽち試して見ましょう。</p>

</div>

<div id="TOC">
<ul>
<li><a href="#ベクターに名前をつける"
id="toc-ベクターに名前をつける"><span
class="toc-section-number">1</span> ベクターに名前をつける</a></li>
<li><a href="#ベクター-行列" id="toc-ベクター-行列"><span
class="toc-section-number">2</span> ベクター → 行列</a></li>
<li><a href="#リスト-データフレーム"
id="toc-リスト-データフレーム"><span class="toc-section-number">3</span>
リスト → データフレーム</a></li>
<li><a href="#ベクター-ファクター" id="toc-ベクター-ファクター"><span
class="toc-section-number">4</span> ベクター → ファクター</a>
<ul>
<li><a href="#順序付き因子" id="toc-順序付き因子"><span
class="toc-section-number">4.1</span> 順序付き因子</a></li>
</ul></li>
<li><a href="#ベクターに属性をつける"
id="toc-ベクターに属性をつける"><span
class="toc-section-number">5</span> ベクターに属性をつける</a></li>
<li><a href="#まとめ" id="toc-まとめ"><span
class="toc-section-number">6</span> まとめ</a></li>
</ul>
</div>

<div id="ベクターに名前をつける" class="section level1" number="1">
<h1><span class="header-section-number">1</span>
ベクターに名前をつける</h1>
<p>まずは属性のおさらいです。RはvectorやMatrixの各要素に名前をつけられるのが特徴ですが、属性によって実現されています。</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode r"><code class="sourceCode r"><span id="cb1-1"><a href="#cb1-1" tabindex="-1"></a>d <span class="ot">&lt;-</span> <span class="dv">1</span><span class="sc">:</span><span class="dv">3</span></span>
<span id="cb1-2"><a href="#cb1-2" tabindex="-1"></a><span class="fu">attributes</span>(d)</span></code></pre></div>
<pre><code>NULL</code></pre>
<p>vecotrをつくっただけでは属性がついていませんが、</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode r"><code class="sourceCode r"><span id="cb3-1"><a href="#cb3-1" tabindex="-1"></a><span class="fu">names</span>(d) <span class="ot">&lt;-</span> <span class="fu">c</span>(<span class="st">&quot;a&quot;</span>, <span class="st">&quot;b&quot;</span>, <span class="st">&quot;c&quot;</span>)</span>
<span id="cb3-2"><a href="#cb3-2" tabindex="-1"></a><span class="fu">attributes</span>(d)</span></code></pre></div>
<pre><code>$names
[1] &quot;a&quot; &quot;b&quot; &quot;c&quot;</code></pre>
<p>名前をつけると属性に書かれることが分かります。</p>
</div>
<div id="ベクター-行列" class="section level1" number="2">
<h1><span class="header-section-number">2</span> ベクター → 行列</h1>
<p>ベクターに属性<code>dim</code>を付与すると行列になります。</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode r"><code class="sourceCode r"><span id="cb5-1"><a href="#cb5-1" tabindex="-1"></a>d <span class="ot">&lt;-</span> <span class="dv">1</span><span class="sc">:</span><span class="dv">9</span></span>
<span id="cb5-2"><a href="#cb5-2" tabindex="-1"></a><span class="fu">attributes</span>(d) <span class="ot">&lt;-</span> <span class="fu">list</span>(<span class="at">dim=</span><span class="fu">c</span>(<span class="dv">3</span>, <span class="dv">3</span>))</span>
<span id="cb5-3"><a href="#cb5-3" tabindex="-1"></a>d; <span class="fu">class</span>(d)</span></code></pre></div>
<pre><code>     [,1] [,2] [,3]
[1,]    1    4    7
[2,]    2    5    8
[3,]    3    6    9</code></pre>
<pre><code>[1] &quot;matrix&quot; &quot;array&quot; </code></pre>
<p>簡単ですね。同様に<code>array</code>にすることもできます。
属性はリスト構造になっていて、複数の属性を同時に持てます。
逆に<code>dim</code>を消すとベクターに戻ります。実用上は<code>c(d)</code>とでもした方が速いのですが、理解のためにやってみましょう。</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode r"><code class="sourceCode r"><span id="cb8-1"><a href="#cb8-1" tabindex="-1"></a><span class="fu">attributes</span>(d) <span class="ot">&lt;-</span> <span class="cn">NULL</span></span>
<span id="cb8-2"><a href="#cb8-2" tabindex="-1"></a>d; <span class="fu">class</span>(d)</span></code></pre></div>
<pre><code>[1] 1 2 3 4 5 6 7 8 9</code></pre>
<pre><code>[1] &quot;integer&quot;</code></pre>
<p>Rの世界では構造のあるvectorがmatrixと言えます。</p>
</div>
<div id="リスト-データフレーム" class="section level1" number="3">
<h1><span class="header-section-number">3</span> リスト →
データフレーム</h1>
<p>リストの属性を変化させて、データフレームにしてみましょう。
まずはリストを作って、クラスを確認します。</p>
<div class="sourceCode" id="cb11"><pre class="sourceCode r"><code class="sourceCode r"><span id="cb11-1"><a href="#cb11-1" tabindex="-1"></a>d <span class="ot">&lt;-</span> <span class="fu">list</span>(<span class="at">a=</span><span class="dv">1</span><span class="sc">:</span><span class="dv">3</span>, <span class="at">b=</span><span class="dv">6</span><span class="sc">:</span><span class="dv">8</span>)</span>
<span id="cb11-2"><a href="#cb11-2" tabindex="-1"></a>d; <span class="fu">class</span>(d)</span></code></pre></div>
<pre><code>$a
[1] 1 2 3

$b
[1] 6 7 8</code></pre>
<pre><code>[1] &quot;list&quot;</code></pre>
<p>次に、作ったリストに属性を付与します。
<code>class</code>と<code>row.names</code>を設定すると、</p>
<div class="sourceCode" id="cb14"><pre class="sourceCode r"><code class="sourceCode r"><span id="cb14-1"><a href="#cb14-1" tabindex="-1"></a><span class="fu">attributes</span>(d) <span class="ot">&lt;-</span> <span class="fu">list</span>(<span class="at">names=</span><span class="fu">names</span>(d), <span class="at">class=</span><span class="st">&quot;data.frame&quot;</span>, <span class="at">row.names=</span><span class="dv">1</span><span class="sc">:</span><span class="fu">max</span>(<span class="fu">sapply</span>(d, length)))</span>
<span id="cb14-2"><a href="#cb14-2" tabindex="-1"></a>d; <span class="fu">class</span>(d)</span></code></pre></div>
<pre><code>  a b
1 1 6
2 2 7
3 3 8</code></pre>
<pre><code>[1] &quot;data.frame&quot;</code></pre>
<p>データフレームに変化したことがわかります。</p>
</div>
<div id="ベクター-ファクター" class="section level1" number="4">
<h1><span class="header-section-number">4</span> ベクター →
ファクター</h1>
<p>因子型もベクターに属性を付与した構造になっていますが、名前と値の関係がひっくり返ります。
まずは、文字列のベクターを準備します。</p>
<div class="sourceCode" id="cb17"><pre class="sourceCode r"><code class="sourceCode r"><span id="cb17-1"><a href="#cb17-1" tabindex="-1"></a>v <span class="ot">&lt;-</span> <span class="fu">c</span>(<span class="st">&quot;a&quot;</span>, <span class="st">&quot;b&quot;</span>, <span class="st">&quot;c&quot;</span>)[<span class="fu">round</span>(<span class="fu">runif</span>(<span class="dv">9</span>, <span class="at">min=</span><span class="fl">0.5</span>, <span class="at">max=</span><span class="fl">3.5</span>))]</span>
<span id="cb17-2"><a href="#cb17-2" tabindex="-1"></a>v</span></code></pre></div>
<pre><code>[1] &quot;a&quot; &quot;a&quot; &quot;a&quot; &quot;c&quot; &quot;c&quot; &quot;a&quot; &quot;b&quot; &quot;c&quot; &quot;b&quot;</code></pre>
<p>aを1，bを2，cを3と文字列ごとに数字を割り当てたベクトルをつくります。</p>
<div class="sourceCode" id="cb19"><pre class="sourceCode r"><code class="sourceCode r"><span id="cb19-1"><a href="#cb19-1" tabindex="-1"></a>n <span class="ot">&lt;-</span> <span class="fu">unique</span>(<span class="fu">sort</span>(v))</span>
<span id="cb19-2"><a href="#cb19-2" tabindex="-1"></a>w <span class="ot">&lt;-</span> <span class="dv">1</span><span class="sc">:</span><span class="fu">length</span>(n)</span>
<span id="cb19-3"><a href="#cb19-3" tabindex="-1"></a><span class="fu">names</span>(w) <span class="ot">&lt;-</span> n</span>
<span id="cb19-4"><a href="#cb19-4" tabindex="-1"></a>v <span class="ot">&lt;-</span> w[v]</span>
<span id="cb19-5"><a href="#cb19-5" tabindex="-1"></a>v</span></code></pre></div>
<pre><code>a a a c c a b c b 
1 1 1 3 3 1 2 3 2 </code></pre>
<p><code>names</code>属性がついていますが、必要ではないです。
最後に、<code>levels</code>を<code>c("a", "b", "c")</code>に、<code>class</code>をfactorに設定すると因子型になります。</p>
<div class="sourceCode" id="cb21"><pre class="sourceCode r"><code class="sourceCode r"><span id="cb21-1"><a href="#cb21-1" tabindex="-1"></a><span class="fu">attributes</span>(v) <span class="ot">&lt;-</span> <span class="fu">list</span>(<span class="at">levels=</span>n, <span class="st">&quot;class&quot;</span><span class="ot">=</span><span class="st">&quot;factor&quot;</span>)</span>
<span id="cb21-2"><a href="#cb21-2" tabindex="-1"></a>v; <span class="fu">class</span>(v)</span></code></pre></div>
<pre><code>[1] a a a c c a b c b
Levels: a b c</code></pre>
<pre><code>[1] &quot;factor&quot;</code></pre>
<div id="順序付き因子" class="section level2" number="4.1">
<h2><span class="header-section-number">4.1</span> 順序付き因子</h2>
<p><code>class</code>属性に<code>ordered</code>もつけておくと、順序付き因子になります。</p>
<div class="sourceCode" id="cb24"><pre class="sourceCode r"><code class="sourceCode r"><span id="cb24-1"><a href="#cb24-1" tabindex="-1"></a><span class="fu">attributes</span>(v) <span class="ot">&lt;-</span> <span class="fu">list</span>(<span class="at">levels=</span><span class="fu">c</span>(<span class="st">&quot;c&quot;</span>, <span class="st">&quot;a&quot;</span>, <span class="st">&quot;b&quot;</span>), <span class="st">&quot;class&quot;</span><span class="ot">=</span><span class="fu">c</span>(<span class="st">&quot;ordered&quot;</span>, <span class="st">&quot;factor&quot;</span>))</span>
<span id="cb24-2"><a href="#cb24-2" tabindex="-1"></a>v; <span class="fu">class</span>(v)</span></code></pre></div>
<pre><code>[1] c c c b b c a b a
Levels: c &lt; a &lt; b</code></pre>
<pre><code>[1] &quot;ordered&quot; &quot;factor&quot; </code></pre>
<p>factorとorderedの順番を誤って<code>c("factor", "ordered")</code>とすると、順序付なし因子として扱われるので注意してください<a
href="#fn1" class="footnote-ref" id="fnref1"><sup>1</sup></a>。
<code>levels</code>の順序を入れ替えたのにお気づきでしょうが、順序付きだと<code>levels</code>の順序に応じた比較が可能になります。</p>
<div class="sourceCode" id="cb27"><pre class="sourceCode r"><code class="sourceCode r"><span id="cb27-1"><a href="#cb27-1" tabindex="-1"></a><span class="fu">sort</span>(v)</span></code></pre></div>
<pre><code>[1] c c c c a a b b b
Levels: c &lt; a &lt; b</code></pre>
<div class="sourceCode" id="cb29"><pre class="sourceCode r"><code class="sourceCode r"><span id="cb29-1"><a href="#cb29-1" tabindex="-1"></a>v[<span class="dv">1</span>] <span class="sc">&lt;</span> v[<span class="dv">3</span>]</span></code></pre></div>
<pre><code>[1] FALSE</code></pre>
<p>順序ロジットの被説明変数のためみたいなデータ型ですね。</p>
</div>
</div>
<div id="ベクターに属性をつける" class="section level1" number="5">
<h1><span class="header-section-number">5</span>
ベクターに属性をつける</h1>
<p>パッケージの中だと<code>structure</code>で属性をつけているものがぼちぼちあります。</p>
<div class="sourceCode" id="cb31"><pre class="sourceCode r"><code class="sourceCode r"><span id="cb31-1"><a href="#cb31-1" tabindex="-1"></a><span class="fu">structure</span>(<span class="dv">1</span><span class="sc">:</span><span class="dv">6</span>, <span class="at">dim =</span> <span class="fu">c</span>(<span class="dv">2</span>, <span class="dv">3</span>))</span></code></pre></div>
<pre><code>     [,1] [,2] [,3]
[1,]    1    3    5
[2,]    2    4    6</code></pre>
<p><code>dim</code>属性をつけて、行列にしている例です。</p>
</div>
<div id="まとめ" class="section level1" number="6">
<h1><span class="header-section-number">6</span> まとめ</h1>
<p>Rの基本的なデータ構造はvectorとlistしかなく<a href="#fn2"
class="footnote-ref"
id="fnref2"><sup>2</sup></a>、matrixとarrayとfactorとdata.frameは属性をつかった拡張に過ぎません。様々なデータのために様々なクラスが用意されていますが、それらもlistです。こう考えると、実に簡素なプログラミング言語であることが分かります。
なお、<code>data.frame</code>, <code>matrix</code>, <code>array</code>,
<code>factor</code>,
<code>ordered</code>の方が簡潔に読みやすく書けます。以上のような煩雑な処理は不必要に書くのは避けましょう。</p>
</div>
<div class="footnotes footnotes-end-of-document">
<hr />
<ol>
<li
id="fn1"><p>Rのオブジェクト指向はこの順番でクラスの親子関係を把握しています。<a
href="#fnref1" class="footnote-back">↩︎</a></p></li>
<li
id="fn2"><p>構造データの変数として使うものではなく使い勝手はlistと同様なので、environmentは除外しました。<a
href="#fnref2" class="footnote-back">↩︎</a></p></li>
</ol>
</div>

</div>
<div class="footer" id="footer"><!--#include virtual="/parts/footer.txt"--></div>
<script>include_parts('footer', 'https://wh.anlyznews.com/parts/footer.txt');</script>



</div>

<script>

// add bootstrap table styles to pandoc tables
function bootstrapStylePandocTables() {
  $('tr.odd').parent('tbody').parent('table').addClass('table table-condensed');
}
$(document).ready(function () {
  bootstrapStylePandocTables();
});


</script>

<!-- tabsets -->

<script>
$(document).ready(function () {
  window.buildTabsets("TOC");
});

$(document).ready(function () {
  $('.tabset-dropdown > .nav-tabs > li').click(function () {
    $(this).parent().toggleClass('nav-tabs-open');
  });
});
</script>

<!-- code folding -->


<script id="MathJax-script" async
  src="https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-svg.js">
</script>

</body>
</html>
