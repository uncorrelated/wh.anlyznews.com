<!DOCTYPE html>

<html>

<head>

<meta charset="utf-8" />
<meta name="generator" content="pandoc" />
<meta http-equiv="X-UA-Compatible" content="IE=EDGE" />




<title>Rでのバイナリファイルの扱い方</title>

<script src="common_files/header-attrs-2.25/header-attrs.js"></script>
<script src="common_files/jquery-3.6.0/jquery-3.6.0.min.js"></script>
<meta name="viewport" content="width=device-width, initial-scale=1" />
<link href="common_files/bootstrap-3.3.5/css/bootstrap.min.css" rel="stylesheet" />
<script src="common_files/bootstrap-3.3.5/js/bootstrap.min.js"></script>
<script src="common_files/bootstrap-3.3.5/shim/html5shiv.min.js"></script>
<script src="common_files/bootstrap-3.3.5/shim/respond.min.js"></script>
<style>h1 {font-size: 34px;}
       h1.title {font-size: 38px;}
       h2 {font-size: 30px;}
       h3 {font-size: 24px;}
       h4 {font-size: 18px;}
       h5 {font-size: 16px;}
       h6 {font-size: 12px;}
       code {color: inherit; background-color: rgba(0, 0, 0, 0.04);}
       pre:not([class]) { background-color: white }</style>
<script src="common_files/navigation-1.1/tabsets.js"></script>
<meta name="ROBOTS" content="INDEX,FOLLOW"/>
<link href='http://www.hatena.ne.jp/uncorrelated/' rel='author'/>
<link rel="SHORTCUT ICON" href="/img/miniicon.ico"/>
<script type="text/javascript">

  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-10387742-4']);
  _gaq.push(['_trackPageview']);

  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();
</script>
<script src="/parts/include_parts.js"></script>

<style type="text/css">
  code{white-space: pre-wrap;}
  span.smallcaps{font-variant: small-caps;}
  span.underline{text-decoration: underline;}
  div.column{display: inline-block; vertical-align: top; width: 50%;}
  div.hanging-indent{margin-left: 1.5em; text-indent: -1.5em;}
  ul.task-list{list-style: none;}
    </style>



<style type="text/css">
  code {
    white-space: pre;
  }
  .sourceCode {
    overflow: visible;
  }
</style>
<style type="text/css" data-origin="pandoc">
pre > code.sourceCode { white-space: pre; position: relative; }
pre > code.sourceCode > span { line-height: 1.25; }
pre > code.sourceCode > span:empty { height: 1.2em; }
.sourceCode { overflow: visible; }
code.sourceCode > span { color: inherit; text-decoration: inherit; }
div.sourceCode { margin: 1em 0; }
pre.sourceCode { margin: 0; }
@media screen {
div.sourceCode { overflow: auto; }
}
@media print {
pre > code.sourceCode { white-space: pre-wrap; }
pre > code.sourceCode > span { text-indent: -5em; padding-left: 5em; }
}
pre.numberSource code
  { counter-reset: source-line 0; }
pre.numberSource code > span
  { position: relative; left: -4em; counter-increment: source-line; }
pre.numberSource code > span > a:first-child::before
  { content: counter(source-line);
    position: relative; left: -1em; text-align: right; vertical-align: baseline;
    border: none; display: inline-block;
    -webkit-touch-callout: none; -webkit-user-select: none;
    -khtml-user-select: none; -moz-user-select: none;
    -ms-user-select: none; user-select: none;
    padding: 0 4px; width: 4em;
    color: #aaaaaa;
  }
pre.numberSource { margin-left: 3em; border-left: 1px solid #aaaaaa;  padding-left: 4px; }
div.sourceCode
  {   }
@media screen {
pre > code.sourceCode > span > a:first-child::before { text-decoration: underline; }
}
code span.al { color: #ff0000; font-weight: bold; } /* Alert */
code span.an { color: #60a0b0; font-weight: bold; font-style: italic; } /* Annotation */
code span.at { color: #7d9029; } /* Attribute */
code span.bn { color: #40a070; } /* BaseN */
code span.bu { color: #008000; } /* BuiltIn */
code span.cf { color: #007020; font-weight: bold; } /* ControlFlow */
code span.ch { color: #4070a0; } /* Char */
code span.cn { color: #880000; } /* Constant */
code span.co { color: #60a0b0; font-style: italic; } /* Comment */
code span.cv { color: #60a0b0; font-weight: bold; font-style: italic; } /* CommentVar */
code span.do { color: #ba2121; font-style: italic; } /* Documentation */
code span.dt { color: #902000; } /* DataType */
code span.dv { color: #40a070; } /* DecVal */
code span.er { color: #ff0000; font-weight: bold; } /* Error */
code span.ex { } /* Extension */
code span.fl { color: #40a070; } /* Float */
code span.fu { color: #06287e; } /* Function */
code span.im { color: #008000; font-weight: bold; } /* Import */
code span.in { color: #60a0b0; font-weight: bold; font-style: italic; } /* Information */
code span.kw { color: #007020; font-weight: bold; } /* Keyword */
code span.op { color: #666666; } /* Operator */
code span.ot { color: #007020; } /* Other */
code span.pp { color: #bc7a00; } /* Preprocessor */
code span.sc { color: #4070a0; } /* SpecialChar */
code span.ss { color: #bb6688; } /* SpecialString */
code span.st { color: #4070a0; } /* String */
code span.va { color: #19177c; } /* Variable */
code span.vs { color: #4070a0; } /* VerbatimString */
code span.wa { color: #60a0b0; font-weight: bold; font-style: italic; } /* Warning */

</style>
<script>
// apply pandoc div.sourceCode style to pre.sourceCode instead
(function() {
  var sheets = document.styleSheets;
  for (var i = 0; i < sheets.length; i++) {
    if (sheets[i].ownerNode.dataset["origin"] !== "pandoc") continue;
    try { var rules = sheets[i].cssRules; } catch (e) { continue; }
    var j = 0;
    while (j < rules.length) {
      var rule = rules[j];
      // check if there is a div.sourceCode rule
      if (rule.type !== rule.STYLE_RULE || rule.selectorText !== "div.sourceCode") {
        j++;
        continue;
      }
      var style = rule.style.cssText;
      // check if color or background-color is set
      if (rule.style.color === '' && rule.style.backgroundColor === '') {
        j++;
        continue;
      }
      // replace div.sourceCode by a pre.sourceCode rule
      sheets[i].deleteRule(j);
      sheets[i].insertRule('pre.sourceCode{' + style + '}', j);
    }
  }
})();
</script>

<style type="text/css">
  p.abstract{
    text-align: center;
    font-weight: bold;
  }
  div.abstract{
    margin: auto;
    width: 90%;
  }
</style>



<link rel="stylesheet" href="../R/styles.css" type="text/css" />



<style type = "text/css">
.main-container {
  max-width: 940px;
  margin-left: auto;
  margin-right: auto;
}
img {
  max-width:100%;
}
.tabbed-pane {
  padding-top: 12px;
}
.html-widget {
  margin-bottom: 20px;
}
button.code-folding-btn:focus {
  outline: none;
}
summary {
  display: list-item;
}
details > summary > p:only-child {
  display: inline;
}
pre code {
  padding: 0;
}
</style>



<!-- tabsets -->

<style type="text/css">
.tabset-dropdown > .nav-tabs {
  display: inline-table;
  max-height: 500px;
  min-height: 44px;
  overflow-y: auto;
  border: 1px solid #ddd;
  border-radius: 4px;
}

.tabset-dropdown > .nav-tabs > li.active:before, .tabset-dropdown > .nav-tabs.nav-tabs-open:before {
  content: "\e259";
  font-family: 'Glyphicons Halflings';
  display: inline-block;
  padding: 10px;
  border-right: 1px solid #ddd;
}

.tabset-dropdown > .nav-tabs.nav-tabs-open > li.active:before {
  content: "\e258";
  font-family: 'Glyphicons Halflings';
  border: none;
}

.tabset-dropdown > .nav-tabs > li.active {
  display: block;
}

.tabset-dropdown > .nav-tabs > li > a,
.tabset-dropdown > .nav-tabs > li > a:focus,
.tabset-dropdown > .nav-tabs > li > a:hover {
  border: none;
  display: inline-block;
  border-radius: 4px;
  background-color: transparent;
}

.tabset-dropdown > .nav-tabs.nav-tabs-open > li {
  display: block;
  float: none;
}

.tabset-dropdown > .nav-tabs > li {
  display: none;
}
</style>

<!-- code folding -->




</head>

<body>


<div class="container-fluid main-container">



<div class="header">
<!--#include virtual="/parts/header.txt"-->

</div>
<div class="advertisement">

<!--#include virtual="/parts/ad.txt"-->
<div class="adsense">
<script type="text/javascript"><!--
google_ad_client = "pub-1521343453876863";
/* 120x600, 作成済み 08/03/26 */
google_ad_slot = "6814144664";
google_ad_width = 120;
google_ad_height = 600;
//-->
</script>
<script type="text/javascript"
src="https://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
</div>

</div>

<div class="right">

<div id="rhs"><!--#include virtual="menu.txt"--></div>
<script>include_parts('rhs', 'https://wh.anlyznews.com/R/menu.txt');</script>

<div>
<!-- SiteSearch Google -->
<form method="get" action="https://www.google.co.jp/search">
<div style="text-align:center;">
<a href="https://www.google.co.jp/"><img src="https://www.google.com/logos/Logo_40wht.gif" border="0" alt="Google" align="absmiddle"/></a>

<input type="text" name="q" size="20" maxlength="255" value=""/>
<input type="hidden" name="hl" value="ja"/>
<input type="hidden" name="ie" value="UTF-8"/>
<input type="hidden" name="domains" value="wh.anlyznews.com"/>
<input type="submit" name="btnG" value="Google 検索"/><br/>
<div style="text-align:left;margin:8pt;0pt;0pt;0pt;font-size:10pt;line-height:11pt;">
<input type="radio" name="sitesearch" value=""/><span style="position:relative; top:-2pt;">WWWを検索</span><br/>
<input type="radio" name="sitesearch" value="wh.anlyznews.com" checked="true"/><span style="position:relative; top:-2pt;">サイト内を検索</span>
</div>
</div>
</form>
<!-- SiteSearch Google -->
</div>

</div>

<div class="article" id="article">

<div id="header">



<h1 class="title toc-ignore">Rでのバイナリファイルの扱い方</h1>
<!--#include virtual="/parts/under_h2.txt"-->

<div>
<a href="https://b.hatena.ne.jp/entry/" class="hatena-bookmark-button" data-hatena-bookmark-layout="simple" title="このエントリーをはてなブックマークに追加"><img src="https://b.st-hatena.com/images/entry-button/button-only.gif" alt="このエントリーをはてなブックマークに追加" width="20" height="20" style="border: none;" /></a><script type="text/javascript" src="https://b.st-hatena.com/js/bookmark_button.js" charset="utf-8" async="async"></script>
<a class='mixi-check-button' data-button='button-1' data-key='956e750b5294c8e605d83627364938b17e5bbc2b' href='https://mixi.jp/share.pl'>Check</a><script src='https://static.mixi.jp/js/share.js' type='text/javascript'></script>
<script type="text/javascript" src="https://static.evernote.com/noteit.js"></script>
<a href="#" onclick="Evernote.doClip({contentId:'article'}); return false;"><img src="https://static.evernote.com/article-clipper.png" alt="Clip to Evernote" style="border:none;" border="0"/></a>
<a href="https://twitter.com/share?ref_src=twsrc%5Etfw" class="twitter-share-button" data-show-count="false">Tweet</a><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
<div class="line-it-button" data-lang="ja" data-type="share-c" data-env="REAL" data-url="https://wh.anlyznews.com/" data-color="default" data-size="small" data-count="false" data-ver="3" style="display: none;"></div>
<script src="https://www.line-website.com/social-plugins/js/thirdparty/loader.min.js" async="async" defer="defer"></script>
<div style="text-align:center;"><script type="text/javascript"><!--
google_ad_client = "ca-pub-1521343453876863";
/* H2下側 */
google_ad_slot = "1509061605";
google_ad_width = 468;
google_ad_height = 60;
//-->
</script>
<script type="text/javascript"
src="https://pagead2.googlesyndication.com/pagead/show_ads.js">
</script></div>
</div>

<p>RでもFortranなど他のプログラム言語の書き出したバイナリファイルを読んでプロットしたり、画像や音声データのメタ情報を読んで統計解析をかけたりできます。</p>

</div>

<div id="TOC">
<ul>
<li><a href="#raw型の扱い方" id="toc-raw型の扱い方"><span
class="toc-section-number">1</span> raw型の扱い方</a>
<ul>
<li><a href="#pack形式raw型への変換"
id="toc-pack形式raw型への変換"><span
class="toc-section-number">1.1</span> pack形式raw型への変換</a></li>
<li><a href="#pack形式raw型からの変換"
id="toc-pack形式raw型からの変換"><span
class="toc-section-number">1.2</span> pack形式raw型からの変換</a></li>
<li><a href="#unpack形式への変換" id="toc-unpack形式への変換"><span
class="toc-section-number">1.3</span> unpack形式への変換</a></li>
<li><a href="#unpack形式からの変換" id="toc-unpack形式からの変換"><span
class="toc-section-number">1.4</span> unpack形式からの変換</a></li>
</ul></li>
<li><a href="#バイナリファイルの扱い方"
id="toc-バイナリファイルの扱い方"><span
class="toc-section-number">2</span> バイナリファイルの扱い方</a>
<ul>
<li><a href="#書き出し" id="toc-書き出し"><span
class="toc-section-number">2.1</span> 書き出し</a></li>
<li><a href="#読み込み" id="toc-読み込み"><span
class="toc-section-number">2.2</span> 読み込み</a></li>
</ul></li>
<li><a href="#逐次読み出しとランダムアクセス"
id="toc-逐次読み出しとランダムアクセス"><span
class="toc-section-number">3</span>
逐次読み出しとランダムアクセス</a></li>
<li><a href="#fortranで書いたバイナリファイルを読む"
id="toc-fortranで書いたバイナリファイルを読む"><span
class="toc-section-number">4</span>
Fortranで書いたバイナリファイルを読む</a>
<ul>
<li><a href="#fortranのコード" id="toc-fortranのコード"><span
class="toc-section-number">4.1</span> Fortranのコード</a></li>
<li><a href="#rのコード" id="toc-rのコード"><span
class="toc-section-number">4.2</span> Rのコード</a></li>
</ul></li>
<li><a href="#cで書いたバイナリファイルを読む"
id="toc-cで書いたバイナリファイルを読む"><span
class="toc-section-number">5</span>
Cで書いたバイナリ・ファイルを読む</a></li>
<li><a href="#応用時の注意" id="toc-応用時の注意"><span
class="toc-section-number">6</span> 応用時の注意</a></li>
</ul>
</div>

<p>Rでデータを読み書きするときは、CSVのような構造化されたテキストファイルを使うときが多いと思いますが、Rにもバイナリ・データの操作のためにraw型と、そのための関数が用意されています。</p>
<p>raw型にはpack形式とunpack形式の使い方があります。numeric型やcharacter型とpack形式raw型は、相互に変換できます。integer型で表される数値文字参照（コード番号）から、pack形式もしくはunpack形式のraw型にできます。character型で表される16進数値文字参照（16進コード番号）から、pack形式もしくはunpack形式のraw型にできます。バイナリファイルはpack形式raw型の塊として取り扱いますが、numeric型やinteger型と看做して入力できます。numeric型やinteger型のベクトルをpack形式raw型の塊として書き込めば、バイナリファイルになります。本稿ではこれらのことを、実際に操作でなぞります。</p>
<p>Rは対話型インターフェイスなので、慣れてきたらバイナリ・エディタの代わりに使えるかも知れません。</p>
<div id="raw型の扱い方" class="section level1" number="1">
<h1><span class="header-section-number">1</span> raw型の扱い方</h1>
<p>raw型ベクトルも他の型と同様にコピーや変更ができますが、やはり他の型との変換が肝になります。</p>
<div id="pack形式raw型への変換" class="section level2" number="1.1">
<h2><span class="header-section-number">1.1</span>
pack形式raw型への変換</h2>
<p><code>writeBin</code>でraw型に変換するのは意外かも知れません。</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode r"><code class="sourceCode r"><span id="cb1-1"><a href="#cb1-1" tabindex="-1"></a><span class="co"># character型はcharToRawで変換できる</span></span>
<span id="cb1-2"><a href="#cb1-2" tabindex="-1"></a>(p_raw_char <span class="ot">&lt;-</span> <span class="fu">charToRaw</span>(<span class="st">&quot;a&quot;</span>))</span></code></pre></div>
<pre><code>[1] 61</code></pre>
<div class="sourceCode" id="cb3"><pre class="sourceCode r"><code class="sourceCode r"><span id="cb3-1"><a href="#cb3-1" tabindex="-1"></a><span class="co"># integer型はas.rawで変換できる/数値文字参照（コード番号）入力</span></span>
<span id="cb3-2"><a href="#cb3-2" tabindex="-1"></a>(p_raw_int <span class="ot">&lt;-</span> <span class="fu">as.raw</span>(<span class="dv">123</span>)) <span class="co"># 123の代わりに0x7bと書いてもよい</span></span></code></pre></div>
<pre><code>[1] 7b</code></pre>
<div class="sourceCode" id="cb5"><pre class="sourceCode r"><code class="sourceCode r"><span id="cb5-1"><a href="#cb5-1" tabindex="-1"></a><span class="co"># character型で表される16進数値文字参照（16進コード番号）</span></span>
<span id="cb5-2"><a href="#cb5-2" tabindex="-1"></a>(p_raw_int_hex <span class="ot">&lt;-</span> <span class="fu">as.raw</span>(<span class="fu">as.hexmode</span>(<span class="st">&quot;7b&quot;</span>)))</span></code></pre></div>
<pre><code>[1] 7b</code></pre>
<div class="sourceCode" id="cb7"><pre class="sourceCode r"><code class="sourceCode r"><span id="cb7-1"><a href="#cb7-1" tabindex="-1"></a><span class="co"># numeric型に限らずwriteBinはどの型も変換できる</span></span>
<span id="cb7-2"><a href="#cb7-2" tabindex="-1"></a>(p_raw_numeric <span class="ot">&lt;-</span> <span class="fu">writeBin</span>(<span class="fu">c</span>(<span class="fl">1.23</span>, <span class="fl">4.56</span>), <span class="fu">raw</span>()))</span></code></pre></div>
<pre><code> [1] ae 47 e1 7a 14 ae f3 3f 3d 0a d7 a3 70 3d 12 40</code></pre>
</div>
<div id="pack形式raw型からの変換" class="section level2" number="1.2">
<h2><span class="header-section-number">1.2</span>
pack形式raw型からの変換</h2>
<p><code>readBin</code>でraw型から戻せるのも以外かも知れません。</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode r"><code class="sourceCode r"><span id="cb9-1"><a href="#cb9-1" tabindex="-1"></a><span class="co"># character型にはcharToRawで変換</span></span>
<span id="cb9-2"><a href="#cb9-2" tabindex="-1"></a><span class="fu">rawToChar</span>(p_raw_char)</span></code></pre></div>
<pre><code>[1] &quot;a&quot;</code></pre>
<div class="sourceCode" id="cb11"><pre class="sourceCode r"><code class="sourceCode r"><span id="cb11-1"><a href="#cb11-1" tabindex="-1"></a><span class="co"># integer型の数値文字参照（コード番号）にはas.integer</span></span>
<span id="cb11-2"><a href="#cb11-2" tabindex="-1"></a><span class="fu">as.integer</span>(p_raw_int)</span></code></pre></div>
<pre><code>[1] 123</code></pre>
<div class="sourceCode" id="cb13"><pre class="sourceCode r"><code class="sourceCode r"><span id="cb13-1"><a href="#cb13-1" tabindex="-1"></a><span class="co"># integer型にしてから16進数表記にする</span></span>
<span id="cb13-2"><a href="#cb13-2" tabindex="-1"></a><span class="fu">sprintf</span>(<span class="st">&quot;%x&quot;</span>, <span class="fu">as.integer</span>(p_raw_int_hex))</span></code></pre></div>
<pre><code>[1] &quot;7b&quot;</code></pre>
<div class="sourceCode" id="cb15"><pre class="sourceCode r"><code class="sourceCode r"><span id="cb15-1"><a href="#cb15-1" tabindex="-1"></a><span class="co"># 型と長さnの指定が必要</span></span>
<span id="cb15-2"><a href="#cb15-2" tabindex="-1"></a><span class="fu">readBin</span>(p_raw_numeric, <span class="fu">numeric</span>(), <span class="at">n =</span> <span class="dv">2</span>)</span></code></pre></div>
<pre><code>[1] 1.23 4.56</code></pre>
</div>
<div id="unpack形式への変換" class="section level2" number="1.3">
<h2><span class="header-section-number">1.3</span>
unpack形式への変換</h2>
<p>アセンブラ使いだった人以外、使い道が思いつかないかも知れませんが、0と1の配列にできます。</p>
<div class="sourceCode" id="cb17"><pre class="sourceCode r"><code class="sourceCode r"><span id="cb17-1"><a href="#cb17-1" tabindex="-1"></a><span class="co"># 数値文字参照（コード番号）からの変換</span></span>
<span id="cb17-2"><a href="#cb17-2" tabindex="-1"></a>(up_raw_int <span class="ot">&lt;-</span> <span class="fu">intToBits</span>(<span class="dv">123</span>))</span></code></pre></div>
<pre><code> [1] 01 01 00 01 01 01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
[26] 00 00 00 00 00 00 00</code></pre>
<div class="sourceCode" id="cb19"><pre class="sourceCode r"><code class="sourceCode r"><span id="cb19-1"><a href="#cb19-1" tabindex="-1"></a><span class="co"># pack形式raw型からの変換</span></span>
<span id="cb19-2"><a href="#cb19-2" tabindex="-1"></a><span class="fu">rawToBits</span>(p_raw_int)</span></code></pre></div>
<pre><code>[1] 01 01 00 01 01 01 01 00</code></pre>
<p>長さが異なるのは、integer型は32bitsで、raw型は8bitsだからです。</p>
</div>
<div id="unpack形式からの変換" class="section level2" number="1.4">
<h2><span class="header-section-number">1.4</span>
unpack形式からの変換</h2>
<p>0と1の配列から、まとめたものにもできます。</p>
<div class="sourceCode" id="cb21"><pre class="sourceCode r"><code class="sourceCode r"><span id="cb21-1"><a href="#cb21-1" tabindex="-1"></a><span class="fu">packBits</span>(up_raw_int, <span class="st">&quot;raw&quot;</span>) <span class="co"># raw型にする</span></span></code></pre></div>
<pre><code>[1] 7b 00 00 00</code></pre>
<div class="sourceCode" id="cb23"><pre class="sourceCode r"><code class="sourceCode r"><span id="cb23-1"><a href="#cb23-1" tabindex="-1"></a><span class="fu">packBits</span>(up_raw_int, <span class="st">&quot;integer&quot;</span>) <span class="co"># integerとdouble(numeric)は直接戻せる</span></span></code></pre></div>
<pre><code>[1] 123</code></pre>
</div>
</div>
<div id="バイナリファイルの扱い方" class="section level1" number="2">
<h1><span class="header-section-number">2</span>
バイナリファイルの扱い方</h1>
<p>エラーは起きないと見なせて、ファイルフォーマットが決まっていて、データをすべてまとめて読み書きできるのであれば、煩雑なことは無いです。</p>
<div id="書き出し" class="section level2" number="2.1">
<h2><span class="header-section-number">2.1</span> 書き出し</h2>
<p>numeric型の乱数列をつくってファイルに書き出します。</p>
<div class="sourceCode" id="cb25"><pre class="sourceCode r"><code class="sourceCode r"><span id="cb25-1"><a href="#cb25-1" tabindex="-1"></a>n <span class="ot">&lt;-</span> <span class="dv">10</span></span>
<span id="cb25-2"><a href="#cb25-2" tabindex="-1"></a>fname <span class="ot">&lt;-</span> <span class="st">&quot;vector.dat&quot;</span></span>
<span id="cb25-3"><a href="#cb25-3" tabindex="-1"></a>(v <span class="ot">&lt;-</span> <span class="fu">round</span>(<span class="fu">runif</span>(n, <span class="at">min=</span><span class="fl">0.5</span>, <span class="at">max=</span><span class="fl">9.5</span>), <span class="dv">2</span>))</span></code></pre></div>
<pre><code> [1] 4.59 9.49 3.74 5.97 4.46 2.91 3.76 8.28 7.43 5.54</code></pre>
<div class="sourceCode" id="cb27"><pre class="sourceCode r"><code class="sourceCode r"><span id="cb27-1"><a href="#cb27-1" tabindex="-1"></a>os <span class="ot">&lt;-</span> <span class="fu">file</span>(fname, <span class="st">&quot;wb&quot;</span>)</span>
<span id="cb27-2"><a href="#cb27-2" tabindex="-1"></a><span class="fu">writeBin</span>(v, os)</span>
<span id="cb27-3"><a href="#cb27-3" tabindex="-1"></a><span class="fu">close</span>(os)</span></code></pre></div>
</div>
<div id="読み込み" class="section level2" number="2.2">
<h2><span class="header-section-number">2.2</span> 読み込み</h2>
<p>つくったバイナリ・ファイルを読み込んでみましょう。
<code>n &lt;- 10</code>としてもよいのですが、ファイルサイズからベクトルに含まれる<code>numeric</code>型の値の個数を計算します。</p>
<div class="sourceCode" id="cb28"><pre class="sourceCode r"><code class="sourceCode r"><span id="cb28-1"><a href="#cb28-1" tabindex="-1"></a>fname <span class="ot">&lt;-</span> <span class="st">&quot;vector.dat&quot;</span></span>
<span id="cb28-2"><a href="#cb28-2" tabindex="-1"></a>fs <span class="ot">&lt;-</span> <span class="fu">file.info</span>(fname)[, <span class="st">&quot;size&quot;</span>]</span>
<span id="cb28-3"><a href="#cb28-3" tabindex="-1"></a>size_of_numeric <span class="ot">&lt;-</span> <span class="fu">length</span>(<span class="fu">writeBin</span>(<span class="fu">numeric</span>(<span class="dv">1</span>), <span class="fu">raw</span>())) <span class="co"># Cのsizeofの同等物が無い</span></span>
<span id="cb28-4"><a href="#cb28-4" tabindex="-1"></a>n <span class="ot">&lt;-</span> fs <span class="sc">/</span> size_of_numeric</span></code></pre></div>
<p>ファイルを開いて<code>n</code>の<code>numeric</code>型を読み込みます。</p>
<div class="sourceCode" id="cb29"><pre class="sourceCode r"><code class="sourceCode r"><span id="cb29-1"><a href="#cb29-1" tabindex="-1"></a>is <span class="ot">&lt;-</span> <span class="fu">file</span>(fname, <span class="st">&quot;rb&quot;</span>, <span class="at">blocking =</span> <span class="cn">FALSE</span>)</span>
<span id="cb29-2"><a href="#cb29-2" tabindex="-1"></a>(v2 <span class="ot">&lt;-</span> <span class="fu">readBin</span>(is, <span class="fu">numeric</span>(), <span class="at">n =</span> n)) <span class="co"># 変数の型と読み込む個数を指定する</span></span></code></pre></div>
<pre><code> [1] 4.59 9.49 3.74 5.97 4.46 2.91 3.76 8.28 7.43 5.54</code></pre>
<div class="sourceCode" id="cb31"><pre class="sourceCode r"><code class="sourceCode r"><span id="cb31-1"><a href="#cb31-1" tabindex="-1"></a><span class="fu">close</span>(is)</span></code></pre></div>
<p>書き出した<code>v</code>と読み込んだ<code>v2</code>が同じか確認します。</p>
<div class="sourceCode" id="cb32"><pre class="sourceCode r"><code class="sourceCode r"><span id="cb32-1"><a href="#cb32-1" tabindex="-1"></a><span class="cf">if</span>(<span class="fu">all</span>(<span class="at">v =</span> v2)) <span class="fu">print</span>(<span class="st">&quot;v2 is the same as v.&quot;</span>) <span class="cf">else</span> <span class="fu">print</span>(<span class="st">&quot;v2 is diffrent from v.&quot;</span>)</span></code></pre></div>
<pre><code>Warning in all(v = v2): &#39;double&#39; 型の引数を論理型に変換します</code></pre>
<pre><code>[1] &quot;v2 is the same as v.&quot;</code></pre>
<p>無事、同じでしたね。</p>
</div>
</div>
<div id="逐次読み出しとランダムアクセス" class="section level1"
number="3">
<h1><span class="header-section-number">3</span>
逐次読み出しとランダムアクセス</h1>
<p>Rのファイル入出力はC標準のファイル入出力と大きな差異はないです。一気に全体を読まない場合は、C言語の<code>feof</code>に該当する<code>isIncomplete</code>が<code>TRUE</code>になるまで繰り返し処理するコードを書きます。また、ランダムアクセス可能かは<code>isSeekable</code>で確認でき、可能な場合は<code>seek</code>や<code>truncate</code>ができます。一方で、<code>flock</code>は標準では提供されません。</p>
</div>
<div id="fortranで書いたバイナリファイルを読む" class="section level1"
number="4">
<h1><span class="header-section-number">4</span>
Fortranで書いたバイナリファイルを読む</h1>
<p>数値解析の速度は申し分がないFortranですが、プロットなどのI/O周りの使い勝手は悪いです。Fortranの計算結果をファイルに書き出して、Rに読ますのもひとつの方法です。簡単な例でやり方を確認しておきましょう。</p>
<div id="fortranのコード" class="section level2" number="4.1">
<h2><span class="header-section-number">4.1</span> Fortranのコード</h2>
<p>3行3列の行列をFortranで作ってバイナリ・ファイルに保存します。</p>
<div class="sourceCode" id="cb35"><pre
class="sourceCode fortran"><code class="sourceCode fortranfixed"><span id="cb35-1"><a href="#cb35-1" tabindex="-1"></a><span class="kw">program</span> makeBin</span>
<span id="cb35-2"><a href="#cb35-2" tabindex="-1"></a>  <span class="kw">implicit</span> <span class="kw">none</span></span>
<span id="cb35-3"><a href="#cb35-3" tabindex="-1"></a>  <span class="dt">double precision</span>, <span class="dt">dimension(3, 3)</span> <span class="dt">::</span> m <span class="kw">=</span> <span class="fu">reshape</span>(<span class="kw">(/</span><span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>,<span class="dv">4</span>,<span class="dv">5</span>,<span class="dv">6</span>,<span class="dv">7</span>,<span class="dv">8</span>,<span class="dv">9</span><span class="kw">/)</span><span class="co">,(/3,3/))</span></span>
<span id="cb35-4"><a href="#cb35-4" tabindex="-1"></a></span>
<span id="cb35-5"><a href="#cb35-5" tabindex="-1"></a>  <span class="fu">open(</span><span class="dv">17</span>,<span class="fu">file</span><span class="kw">=</span><span class="st">&#39;data_seq.dat&#39;</span>, <span class="fu">form</span><span class="kw">=</span><span class="st">&#39;unformatted&#39;</span>, <span class="fu">status</span><span class="kw">=</span><span class="st">&#39;replace&#39;</span><span class="fu">)</span></span>
<span id="cb35-6"><a href="#cb35-6" tabindex="-1"></a>  <span class="fu">write(</span><span class="dv">17</span><span class="fu">)</span> m</span>
<span id="cb35-7"><a href="#cb35-7" tabindex="-1"></a>  <span class="fu">close(</span><span class="dv">17</span><span class="fu">)</span></span>
<span id="cb35-8"><a href="#cb35-8" tabindex="-1"></a></span>
<span id="cb35-9"><a href="#cb35-9" tabindex="-1"></a>  <span class="fu">open(</span><span class="dv">17</span>,<span class="fu">file</span><span class="kw">=</span><span class="st">&#39;data_str.dat&#39;</span>, <span class="fu">form</span><span class="kw">=</span><span class="st">&#39;unformatted&#39;</span>, <span class="fu">access</span> <span class="kw">=</span> <span class="st">&quot;stream&quot;</span>, <span class="fu">status</span><span class="kw">=</span><span class="st">&#39;replace&#39;</span><span class="fu">)</span></span>
<span id="cb35-10"><a href="#cb35-10" tabindex="-1"></a>  <span class="fu">write(</span><span class="dv">17</span><span class="fu">)</span> m</span>
<span id="cb35-11"><a href="#cb35-11" tabindex="-1"></a>  <span class="fu">close(</span><span class="dv">17</span><span class="fu">)</span></span>
<span id="cb35-12"><a href="#cb35-12" tabindex="-1"></a><span class="kw">end program</span> makeBin</span></code></pre></div>
<p>2つファイルを作っていますが、オプションで形式が変わるからです。Fortranのバイナリー形式（<code>unformatted</code>）のデフォルト（<code>access = "sequential"</code>）のファイル書き出しだと、<code>write</code>の度に前後にそれぞれ4バイトを足してきます<a
href="#fn1" class="footnote-ref" id="fnref1"><sup>1</sup></a>。Fortran
2003以降で使える<code>access = "stream"</code>ではつきません。</p>
</div>
<div id="rのコード" class="section level2" number="4.2">
<h2><span class="header-section-number">4.2</span> Rのコード</h2>
<p><code>access = "sequential"</code>の<code>data_seq.dat</code>を読むコードを示します。</p>
<div class="sourceCode" id="cb36"><pre class="sourceCode r"><code class="sourceCode r"><span id="cb36-1"><a href="#cb36-1" tabindex="-1"></a>size <span class="ot">&lt;-</span> <span class="fu">c</span>(<span class="dv">3</span>, <span class="dv">3</span>)</span>
<span id="cb36-2"><a href="#cb36-2" tabindex="-1"></a>fname <span class="ot">&lt;-</span> <span class="st">&quot;data_seq.dat&quot;</span></span>
<span id="cb36-3"><a href="#cb36-3" tabindex="-1"></a>fs <span class="ot">&lt;-</span> <span class="fu">file.info</span>(fname)[, <span class="st">&quot;size&quot;</span>]</span>
<span id="cb36-4"><a href="#cb36-4" tabindex="-1"></a>is <span class="ot">&lt;-</span> <span class="fu">file</span>(fname, <span class="st">&quot;rb&quot;</span>, <span class="at">blocking =</span> <span class="cn">FALSE</span>)</span>
<span id="cb36-5"><a href="#cb36-5" tabindex="-1"></a>buf <span class="ot">&lt;-</span> <span class="fu">readBin</span>(is, <span class="st">&quot;raw&quot;</span>, fs)</span>
<span id="cb36-6"><a href="#cb36-6" tabindex="-1"></a><span class="co"># 先頭と末尾の4バイトを除外する</span></span>
<span id="cb36-7"><a href="#cb36-7" tabindex="-1"></a><span class="co"># access = &quot;stream&quot;で書いたならば不要</span></span>
<span id="cb36-8"><a href="#cb36-8" tabindex="-1"></a>buf <span class="ot">&lt;-</span> buf[<span class="sc">-</span><span class="fu">c</span>(<span class="dv">1</span><span class="sc">:</span><span class="dv">4</span>, (fs <span class="sc">-</span> <span class="dv">3</span>)<span class="sc">:</span>fs)]</span>
<span id="cb36-9"><a href="#cb36-9" tabindex="-1"></a><span class="co"># raw型からnumeric型に変更</span></span>
<span id="cb36-10"><a href="#cb36-10" tabindex="-1"></a>v <span class="ot">&lt;-</span> <span class="fu">readBin</span>(buf2, <span class="fu">numeric</span>(), <span class="at">n =</span> <span class="fu">prod</span>(size));</span>
<span id="cb36-11"><a href="#cb36-11" tabindex="-1"></a><span class="fu">close</span>(is)</span>
<span id="cb36-12"><a href="#cb36-12" tabindex="-1"></a>m <span class="ot">&lt;-</span> <span class="fu">matrix</span>(v, size[<span class="dv">1</span>], size[<span class="dv">2</span>])</span></code></pre></div>
</div>
</div>
<div id="cで書いたバイナリファイルを読む" class="section level1"
number="5">
<h1><span class="header-section-number">5</span>
Cで書いたバイナリ・ファイルを読む</h1>
<p>Fortranの<code>access = "sequential"</code>のようにヘッダーとフッターをつけては来ませんが、C言語の二次元配列は行ごとに続けて値が入るので、Rの<code>matrix</code>で行列に戻すときには<code>byrow=TRUE</code>が引数に要ります。</p>
</div>
<div id="応用時の注意" class="section level1" number="6">
<h1><span class="header-section-number">6</span> 応用時の注意</h1>
<p>Rに限った話ではありませんが、応用上はバイナリ・ファイルの構造の把握が大事です。昔の非Intelのシステムで読み書きするバイナリファイルでは、エンディアンが今のシステムの逆の場合もあります。<code>readBin</code>と<code>writeBin</code>で<code>endian</code>を引数に取れますが、<code>big</code>を指定することになります。</p>
</div>
<div class="footnotes footnotes-end-of-document">
<hr />
<ol>
<li
id="fn1"><p>この頭と尻尾の4バイトが何になるかはFortranコンパイラごとに異なり、gfortranだと中身のファイルサイズになります。ただし、gfortranで<code>write</code>した<code>sequential</code>のバイナリーファイルの頭と尻尾を書き換えて、gfortranに<code>read</code>させても問題なく読み取れます。実際のところ、何の機能も果たしていないようです。<a
href="#fnref1" class="footnote-back">↩︎</a></p></li>
</ol>
</div>

</div>
<div class="footer" id="footer"><!--#include virtual="/parts/footer.txt"--></div>
<script>include_parts('footer', 'https://wh.anlyznews.com/parts/footer.txt');</script>



</div>

<script>

// add bootstrap table styles to pandoc tables
function bootstrapStylePandocTables() {
  $('tr.odd').parent('tbody').parent('table').addClass('table table-condensed');
}
$(document).ready(function () {
  bootstrapStylePandocTables();
});


</script>

<!-- tabsets -->

<script>
$(document).ready(function () {
  window.buildTabsets("TOC");
});

$(document).ready(function () {
  $('.tabset-dropdown > .nav-tabs > li').click(function () {
    $(this).parent().toggleClass('nav-tabs-open');
  });
});
</script>

<!-- code folding -->


<script id="MathJax-script" async
  src="https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-svg.js">
</script>

</body>
</html>
