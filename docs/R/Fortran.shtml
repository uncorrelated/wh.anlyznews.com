<!DOCTYPE html>

<html>

<head>

<meta charset="utf-8" />
<meta name="generator" content="pandoc" />
<meta http-equiv="X-UA-Compatible" content="IE=EDGE" />




<title>RからFortranのサブルーチンを呼ぼう</title>

<script src="common_files/header-attrs-2.25/header-attrs.js"></script>
<script src="common_files/jquery-3.6.0/jquery-3.6.0.min.js"></script>
<meta name="viewport" content="width=device-width, initial-scale=1" />
<link href="common_files/bootstrap-3.3.5/css/bootstrap.min.css" rel="stylesheet" />
<script src="common_files/bootstrap-3.3.5/js/bootstrap.min.js"></script>
<script src="common_files/bootstrap-3.3.5/shim/html5shiv.min.js"></script>
<script src="common_files/bootstrap-3.3.5/shim/respond.min.js"></script>
<style>h1 {font-size: 34px;}
       h1.title {font-size: 38px;}
       h2 {font-size: 30px;}
       h3 {font-size: 24px;}
       h4 {font-size: 18px;}
       h5 {font-size: 16px;}
       h6 {font-size: 12px;}
       code {color: inherit; background-color: rgba(0, 0, 0, 0.04);}
       pre:not([class]) { background-color: white }</style>
<script src="common_files/navigation-1.1/tabsets.js"></script>
<meta name="ROBOTS" content="INDEX,FOLLOW"/>
<link href='http://www.hatena.ne.jp/uncorrelated/' rel='author'/>
<link rel="SHORTCUT ICON" href="/img/miniicon.ico"/>
<script type="text/javascript">

  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-10387742-4']);
  _gaq.push(['_trackPageview']);

  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();
</script>
<script src="/parts/include_parts.js"></script>

<style type="text/css">
  code{white-space: pre-wrap;}
  span.smallcaps{font-variant: small-caps;}
  span.underline{text-decoration: underline;}
  div.column{display: inline-block; vertical-align: top; width: 50%;}
  div.hanging-indent{margin-left: 1.5em; text-indent: -1.5em;}
  ul.task-list{list-style: none;}
    </style>



<style type="text/css">
  code {
    white-space: pre;
  }
  .sourceCode {
    overflow: visible;
  }
</style>
<style type="text/css" data-origin="pandoc">
pre > code.sourceCode { white-space: pre; position: relative; }
pre > code.sourceCode > span { line-height: 1.25; }
pre > code.sourceCode > span:empty { height: 1.2em; }
.sourceCode { overflow: visible; }
code.sourceCode > span { color: inherit; text-decoration: inherit; }
div.sourceCode { margin: 1em 0; }
pre.sourceCode { margin: 0; }
@media screen {
div.sourceCode { overflow: auto; }
}
@media print {
pre > code.sourceCode { white-space: pre-wrap; }
pre > code.sourceCode > span { text-indent: -5em; padding-left: 5em; }
}
pre.numberSource code
  { counter-reset: source-line 0; }
pre.numberSource code > span
  { position: relative; left: -4em; counter-increment: source-line; }
pre.numberSource code > span > a:first-child::before
  { content: counter(source-line);
    position: relative; left: -1em; text-align: right; vertical-align: baseline;
    border: none; display: inline-block;
    -webkit-touch-callout: none; -webkit-user-select: none;
    -khtml-user-select: none; -moz-user-select: none;
    -ms-user-select: none; user-select: none;
    padding: 0 4px; width: 4em;
    color: #aaaaaa;
  }
pre.numberSource { margin-left: 3em; border-left: 1px solid #aaaaaa;  padding-left: 4px; }
div.sourceCode
  {   }
@media screen {
pre > code.sourceCode > span > a:first-child::before { text-decoration: underline; }
}
code span.al { color: #ff0000; font-weight: bold; } /* Alert */
code span.an { color: #60a0b0; font-weight: bold; font-style: italic; } /* Annotation */
code span.at { color: #7d9029; } /* Attribute */
code span.bn { color: #40a070; } /* BaseN */
code span.bu { color: #008000; } /* BuiltIn */
code span.cf { color: #007020; font-weight: bold; } /* ControlFlow */
code span.ch { color: #4070a0; } /* Char */
code span.cn { color: #880000; } /* Constant */
code span.co { color: #60a0b0; font-style: italic; } /* Comment */
code span.cv { color: #60a0b0; font-weight: bold; font-style: italic; } /* CommentVar */
code span.do { color: #ba2121; font-style: italic; } /* Documentation */
code span.dt { color: #902000; } /* DataType */
code span.dv { color: #40a070; } /* DecVal */
code span.er { color: #ff0000; font-weight: bold; } /* Error */
code span.ex { } /* Extension */
code span.fl { color: #40a070; } /* Float */
code span.fu { color: #06287e; } /* Function */
code span.im { color: #008000; font-weight: bold; } /* Import */
code span.in { color: #60a0b0; font-weight: bold; font-style: italic; } /* Information */
code span.kw { color: #007020; font-weight: bold; } /* Keyword */
code span.op { color: #666666; } /* Operator */
code span.ot { color: #007020; } /* Other */
code span.pp { color: #bc7a00; } /* Preprocessor */
code span.sc { color: #4070a0; } /* SpecialChar */
code span.ss { color: #bb6688; } /* SpecialString */
code span.st { color: #4070a0; } /* String */
code span.va { color: #19177c; } /* Variable */
code span.vs { color: #4070a0; } /* VerbatimString */
code span.wa { color: #60a0b0; font-weight: bold; font-style: italic; } /* Warning */

</style>
<script>
// apply pandoc div.sourceCode style to pre.sourceCode instead
(function() {
  var sheets = document.styleSheets;
  for (var i = 0; i < sheets.length; i++) {
    if (sheets[i].ownerNode.dataset["origin"] !== "pandoc") continue;
    try { var rules = sheets[i].cssRules; } catch (e) { continue; }
    var j = 0;
    while (j < rules.length) {
      var rule = rules[j];
      // check if there is a div.sourceCode rule
      if (rule.type !== rule.STYLE_RULE || rule.selectorText !== "div.sourceCode") {
        j++;
        continue;
      }
      var style = rule.style.cssText;
      // check if color or background-color is set
      if (rule.style.color === '' && rule.style.backgroundColor === '') {
        j++;
        continue;
      }
      // replace div.sourceCode by a pre.sourceCode rule
      sheets[i].deleteRule(j);
      sheets[i].insertRule('pre.sourceCode{' + style + '}', j);
    }
  }
})();
</script>

<style type="text/css">
  p.abstract{
    text-align: center;
    font-weight: bold;
  }
  div.abstract{
    margin: auto;
    width: 90%;
  }
</style>



<link rel="stylesheet" href="../R/styles.css" type="text/css" />



<style type = "text/css">
.main-container {
  max-width: 940px;
  margin-left: auto;
  margin-right: auto;
}
img {
  max-width:100%;
}
.tabbed-pane {
  padding-top: 12px;
}
.html-widget {
  margin-bottom: 20px;
}
button.code-folding-btn:focus {
  outline: none;
}
summary {
  display: list-item;
}
details > summary > p:only-child {
  display: inline;
}
pre code {
  padding: 0;
}
</style>



<!-- tabsets -->

<style type="text/css">
.tabset-dropdown > .nav-tabs {
  display: inline-table;
  max-height: 500px;
  min-height: 44px;
  overflow-y: auto;
  border: 1px solid #ddd;
  border-radius: 4px;
}

.tabset-dropdown > .nav-tabs > li.active:before, .tabset-dropdown > .nav-tabs.nav-tabs-open:before {
  content: "\e259";
  font-family: 'Glyphicons Halflings';
  display: inline-block;
  padding: 10px;
  border-right: 1px solid #ddd;
}

.tabset-dropdown > .nav-tabs.nav-tabs-open > li.active:before {
  content: "\e258";
  font-family: 'Glyphicons Halflings';
  border: none;
}

.tabset-dropdown > .nav-tabs > li.active {
  display: block;
}

.tabset-dropdown > .nav-tabs > li > a,
.tabset-dropdown > .nav-tabs > li > a:focus,
.tabset-dropdown > .nav-tabs > li > a:hover {
  border: none;
  display: inline-block;
  border-radius: 4px;
  background-color: transparent;
}

.tabset-dropdown > .nav-tabs.nav-tabs-open > li {
  display: block;
  float: none;
}

.tabset-dropdown > .nav-tabs > li {
  display: none;
}
</style>

<!-- code folding -->




</head>

<body>


<div class="container-fluid main-container">



<div class="header">
<!--#include virtual="/parts/header.txt"-->

</div>
<div class="advertisement">

<!--#include virtual="/parts/ad.txt"-->
<div class="adsense">
<script type="text/javascript"><!--
google_ad_client = "pub-1521343453876863";
/* 120x600, 作成済み 08/03/26 */
google_ad_slot = "6814144664";
google_ad_width = 120;
google_ad_height = 600;
//-->
</script>
<script type="text/javascript"
src="https://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
</div>

</div>

<div class="right">

<div id="rhs"><!--#include virtual="menu.txt"--></div>
<script>include_parts('rhs', 'https://wh.anlyznews.com/R/menu.txt');</script>

<div>
<!-- SiteSearch Google -->
<form method="get" action="https://www.google.co.jp/search">
<div style="text-align:center;">
<a href="https://www.google.co.jp/"><img src="https://www.google.com/logos/Logo_40wht.gif" border="0" alt="Google" align="absmiddle"/></a>

<input type="text" name="q" size="20" maxlength="255" value=""/>
<input type="hidden" name="hl" value="ja"/>
<input type="hidden" name="ie" value="UTF-8"/>
<input type="hidden" name="domains" value="wh.anlyznews.com"/>
<input type="submit" name="btnG" value="Google 検索"/><br/>
<div style="text-align:left;margin:8pt;0pt;0pt;0pt;font-size:10pt;line-height:11pt;">
<input type="radio" name="sitesearch" value=""/><span style="position:relative; top:-2pt;">WWWを検索</span><br/>
<input type="radio" name="sitesearch" value="wh.anlyznews.com" checked="true"/><span style="position:relative; top:-2pt;">サイト内を検索</span>
</div>
</div>
</form>
<!-- SiteSearch Google -->
</div>

</div>

<div class="article" id="article">

<div id="header">



<h1 class="title toc-ignore">RからFortranのサブルーチンを呼ぼう</h1>
<!--#include virtual="/parts/under_h2.txt"-->

<div>
<a href="https://b.hatena.ne.jp/entry/" class="hatena-bookmark-button" data-hatena-bookmark-layout="simple" title="このエントリーをはてなブックマークに追加"><img src="https://b.st-hatena.com/images/entry-button/button-only.gif" alt="このエントリーをはてなブックマークに追加" width="20" height="20" style="border: none;" /></a><script type="text/javascript" src="https://b.st-hatena.com/js/bookmark_button.js" charset="utf-8" async="async"></script>
<a class='mixi-check-button' data-button='button-1' data-key='956e750b5294c8e605d83627364938b17e5bbc2b' href='https://mixi.jp/share.pl'>Check</a><script src='https://static.mixi.jp/js/share.js' type='text/javascript'></script>
<script type="text/javascript" src="https://static.evernote.com/noteit.js"></script>
<a href="#" onclick="Evernote.doClip({contentId:'article'}); return false;"><img src="https://static.evernote.com/article-clipper.png" alt="Clip to Evernote" style="border:none;" border="0"/></a>
<a href="https://twitter.com/share?ref_src=twsrc%5Etfw" class="twitter-share-button" data-show-count="false">Tweet</a><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
<div class="line-it-button" data-lang="ja" data-type="share-c" data-env="REAL" data-url="https://wh.anlyznews.com/" data-color="default" data-size="small" data-count="false" data-ver="3" style="display: none;"></div>
<script src="https://www.line-website.com/social-plugins/js/thirdparty/loader.min.js" async="async" defer="defer"></script>
<div style="text-align:center;"><script type="text/javascript"><!--
google_ad_client = "ca-pub-1521343453876863";
/* H2下側 */
google_ad_slot = "1509061605";
google_ad_width = 468;
google_ad_height = 60;
//-->
</script>
<script type="text/javascript"
src="https://pagead2.googlesyndication.com/pagead/show_ads.js">
</script></div>
</div>

<p>データ入出力とプロットに長所があるRと、数値解析では最古にして最速のFortranの組み合わせです。</p>

</div>

<div id="TOC">
<ul>
<li><a href="#準備" id="toc-準備"><span
class="toc-section-number">1</span> 準備</a></li>
<li><a href="#プログラムの作成" id="toc-プログラムの作成"><span
class="toc-section-number">2</span> プログラムの作成</a>
<ul>
<li><a href="#rとfortranの連携の確認"
id="toc-rとfortranの連携の確認"><span
class="toc-section-number">2.1</span> RとFortranの連携の確認</a></li>
<li><a href="#openmpが有効になっていることの確認"
id="toc-openmpが有効になっていることの確認"><span
class="toc-section-number">2.2</span>
OpenMPが有効になっていることの確認</a></li>
<li><a href="#r経由でコンソール出力をする"
id="toc-r経由でコンソール出力をする"><span
class="toc-section-number">2.3</span>
R経由でコンソール出力をする</a></li>
<li><a href="#rでエラーと警告を出す"
id="toc-rでエラーと警告を出す"><span
class="toc-section-number">2.4</span> Rでエラーと警告を出す</a></li>
<li><a href="#ユーザー中断の許可" id="toc-ユーザー中断の許可"><span
class="toc-section-number">2.5</span> ユーザー中断の許可</a></li>
</ul></li>
<li><a href="#fortran-90以降を利用するときの注意"
id="toc-fortran-90以降を利用するときの注意"><span
class="toc-section-number">3</span> Fortran
90以降を利用するときの注意</a></li>
<li><a href="#デバッガー" id="toc-デバッガー"><span
class="toc-section-number">4</span> デバッガー</a></li>
<li><a href="#rがcに提供しているapiを呼び出す"
id="toc-rがcに提供しているapiを呼び出す"><span
class="toc-section-number">5</span> RがCに提供しているAPIを呼び出す</a>
<ul>
<li><a href="#引数の無いcの関数" id="toc-引数の無いcの関数"><span
class="toc-section-number">5.1</span> 引数の無いCの関数</a></li>
<li><a href="#引数のあるcの関数" id="toc-引数のあるcの関数"><span
class="toc-section-number">5.2</span> 引数のあるCの関数</a></li>
</ul></li>
<li><a href="#まとめ" id="toc-まとめ"><span
class="toc-section-number">6</span> まとめ</a></li>
</ul>
</div>

<p>1954年に考案されたFortranは最古の高級言語かつ、数値解析では最速のプログラミング言語として知られています<a
href="#fn1" class="footnote-ref"
id="fnref1"><sup>1</sup></a>が、全般的に使い勝手が悪い<a href="#fn2"
class="footnote-ref" id="fnref2"><sup>2</sup></a>です。Rは柔軟性がある<a
href="#fn3" class="footnote-ref"
id="fnref3"><sup>3</sup></a>プログラミング言語で使い勝手に優れていますが、数値解析をさせるとFortranと比較して10倍から100倍は低速といった感じです<a
href="#fn4" class="footnote-ref"
id="fnref4"><sup>4</sup></a>。数値解析と統計処理は浮動小数点演算を扱うと言う意味では似ているのですが、RとFortranのコンセプトは真逆に近いです<a
href="#fn5" class="footnote-ref"
id="fnref5"><sup>5</sup></a>。これは連携がとれれば相乗効果を発揮することを意味します。そして、RからFortranのサブルーチンを呼び出すのは簡単です。</p>
<div id="準備" class="section level1" number="1">
<h1><span class="header-section-number">1</span> 準備</h1>
<p>MS-WindowsではRとRtoolsをインストールして、環境変数が適切に設定されているか確認してください。この文書の記述時点での最新のR
4.2.2とrtools
4.2の標準インストールであれば、環境変数<code>RTOOLS42_HOME</code>が<code>C:\rtools42</code>になります。また、コマンドプロンプトからRを呼び出せるように、<code>PATH</code>に<code>%R_HOME%\bin</code>を追加しておいてください<a
href="#fn6" class="footnote-ref" id="fnref6"><sup>6</sup></a>。</p>
<p>LinuxであればOSのパッケージマネージャーを用いるなどしてgfortranとRが動く環境にしてください。</p>
<p>インストールが済んだら、OpenMPが有効になるようにオプションを設定します。Windowsの場合は<code>%R_USER%\.R\Makevars.win</code>を作成します。Linuxの場合は<code>~/.R/Makevars</code>です。Rcppなどで開発がしたことがある人にはお馴染みだと思います。
Windowsでこのファイルが存在しない場合は、Rで</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode r"><code class="sourceCode r"><span id="cb1-1"><a href="#cb1-1" tabindex="-1"></a>directory <span class="ot">&lt;-</span> <span class="fu">file.path</span>(<span class="fu">Sys.getenv</span>(<span class="st">&quot;R_USER&quot;</span>), <span class="st">&quot;.R&quot;</span>)</span>
<span id="cb1-2"><a href="#cb1-2" tabindex="-1"></a><span class="cf">if</span>(<span class="sc">!</span><span class="fu">dir.exists</span>(directory)) <span class="fu">dir.create</span>(directory)</span>
<span id="cb1-3"><a href="#cb1-3" tabindex="-1"></a><span class="fu">cat</span>(<span class="st">&quot;CFLAGS = $(SHLIB_OPENMP_CFLAGS)</span><span class="sc">\n</span><span class="st">FCFLAGS = $(SHLIB_OPENMP_FFLAGS)&quot;</span>,</span>
<span id="cb1-4"><a href="#cb1-4" tabindex="-1"></a>    <span class="at">file=</span><span class="fu">paste</span>(directory, <span class="st">&quot;Makevars.win&quot;</span>, <span class="at">sep=</span><span class="st">&quot;/&quot;</span>))</span></code></pre></div>
<p>とすれば作られます。場所は<code>print(directory)</code>をして確認してください。
作った<code>Makevars.win</code>の中身の<code>CFLAGS</code>はCコンパイラに対するオプション、<code>FCFLAGS</code>はgFortran（のfree
source
formのコンパイル）に対するオプションになります。それぞれ<code>$(SHLIB_OPENMP_CFLAGS)</code>と<code>$(SHLIB_OPENMP_FFLAGS)</code>を指定しておくと、OpenMPが有効になります。Cコンパイラは不要に思えるかもですが、gFortranがつくったオブジェクト・ファイルをリンクするのに使います。</p>
<p>なお、Rの標準構成でも使っているBLASとLAPACKのサブルーチンは、<code>FCFLAGS</code>に特段の指定なくそのまま使えます。</p>
</div>
<div id="プログラムの作成" class="section level1" number="2">
<h1><span class="header-section-number">2</span> プログラムの作成</h1>
<p>設定が機能しているか確認していきましょう。</p>
<div id="rとfortranの連携の確認" class="section level2" number="2.1">
<h2><span class="header-section-number">2.1</span>
RとFortranの連携の確認</h2>
<p>Fortranプログラマではないので、<a
href="https://masuday.github.io/fortran_tutorial/r.html">Calling Fortran
subroutines from R</a>を少し改変して使います。</p>
<p>まず、以下の内容の<code>fortsub.f90</code>と言うファイルを作ります。</p>
<div class="sourceCode" id="cb2"><pre
class="sourceCode fortran"><code class="sourceCode fortranfixed"><span id="cb2-1"><a href="#cb2-1" tabindex="-1"></a><span class="kw">subroutine</span> minus1(m,n,x,y)</span>
<span id="cb2-2"><a href="#cb2-2" tabindex="-1"></a>   <span class="dt">integer</span>,<span class="dt">intent(in)</span> <span class="dt">::</span> m,n</span>
<span id="cb2-3"><a href="#cb2-3" tabindex="-1"></a>   <span class="dt">double precision</span>,<span class="dt">intent(in)</span> <span class="dt">::</span> x(m,n)</span>
<span id="cb2-4"><a href="#cb2-4" tabindex="-1"></a>   <span class="dt">double precision</span>,<span class="dt">intent(out)</span> <span class="dt">::</span> y(m,n)</span>
<span id="cb2-5"><a href="#cb2-5" tabindex="-1"></a>   y <span class="kw">=</span> x <span class="kw">-</span> <span class="dv">1</span></span>
<span id="cb2-6"><a href="#cb2-6" tabindex="-1"></a><span class="kw">end subroutine</span> minus1</span></code></pre></div>
<p>次に、以下の内容の<code>fortsub.R</code>と言うファイルを作ります。</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode r"><code class="sourceCode r"><span id="cb3-1"><a href="#cb3-1" tabindex="-1"></a>dll <span class="ot">&lt;-</span> <span class="fu">paste</span>(<span class="st">&quot;fortsub&quot;</span>, .Platform<span class="sc">$</span>dynlib.ext, <span class="at">sep=</span><span class="st">&quot;&quot;</span>)</span>
<span id="cb3-2"><a href="#cb3-2" tabindex="-1"></a><span class="fu">dyn.load</span>(dll)</span>
<span id="cb3-3"><a href="#cb3-3" tabindex="-1"></a>m <span class="ot">&lt;-</span> <span class="dv">3</span></span>
<span id="cb3-4"><a href="#cb3-4" tabindex="-1"></a>n <span class="ot">&lt;-</span> <span class="dv">2</span></span>
<span id="cb3-5"><a href="#cb3-5" tabindex="-1"></a>result <span class="ot">&lt;-</span> <span class="fu">.Fortran</span>(<span class="st">&quot;minus1&quot;</span>,</span>
<span id="cb3-6"><a href="#cb3-6" tabindex="-1"></a>        <span class="fu">as.integer</span>(m), <span class="co"># 型は明示しておかないと連携に失敗しがち</span></span>
<span id="cb3-7"><a href="#cb3-7" tabindex="-1"></a>        <span class="fu">as.integer</span>(n),</span>
<span id="cb3-8"><a href="#cb3-8" tabindex="-1"></a>        <span class="fu">matrix</span>(<span class="fu">as.numeric</span>(<span class="fu">seq</span>(<span class="dv">1</span>, m<span class="sc">*</span>n)),<span class="fu">c</span>(m,n)), </span>
<span id="cb3-9"><a href="#cb3-9" tabindex="-1"></a>        <span class="fu">matrix</span>(<span class="dv">0</span>, m, n))</span>
<span id="cb3-10"><a href="#cb3-10" tabindex="-1"></a><span class="fu">dyn.unload</span>(dll) <span class="co"># unloadしないとFortranのリコンパイル前にRを終了する必要が出てくる</span></span>
<span id="cb3-11"><a href="#cb3-11" tabindex="-1"></a><span class="fu">print</span>(result[[<span class="dv">4</span>]]) <span class="co"># 戻り値はリスト構造</span></span></code></pre></div>
<p>コマンドプロンプトで2つのファイルを置いたディレクトリに移動して、</p>
<pre><code>R CMD SHLIB fortsub.f90
R --slave -f fortsub.R</code></pre>
<p>とすれば実行でき、</p>
<pre><code>     [,1] [,2]
[1,]    0    3
[2,]    1    4
[3,]    2    5</code></pre>
<p>と結果を得ることができます。<code>seq(1, m*n)</code>は<code>c(1,2,3,4,5,6)</code>ですから、Fortranで<code>-1</code>できていることが分かります。連携成功です。</p>
</div>
<div id="openmpが有効になっていることの確認" class="section level2"
number="2.2">
<h2><span class="header-section-number">2.2</span>
OpenMPが有効になっていることの確認</h2>
<p>Fortranユーザーは速度を気にする数値解析ユーザーですから、やはり2022年時点ではOpenMPが必須でしょう。OpenMPが動いていることを確認します。<a
href="https://www.nag-j.co.jp/openMP/openMPHelloOpenMP.html">OpenMP入門:
初めてのOpenMPプログラム - Hello World in
OpenMP</a>のソースコードを少し改変して試しましょう。</p>
<p>まず、以下の内容の<code>helloomp.f90</code>と言うファイルを作ります。</p>
<div class="sourceCode" id="cb6"><pre
class="sourceCode fortran"><code class="sourceCode fortranfixed"><span id="cb6-1"><a href="#cb6-1" tabindex="-1"></a><span class="kw">subroutine</span> helloomp</span>
<span id="cb6-2"><a href="#cb6-2" tabindex="-1"></a><span class="co">!$ use omp_lib</span></span>
<span id="cb6-3"><a href="#cb6-3" tabindex="-1"></a>    <span class="fu">print</span> <span class="kw">*</span>, <span class="st">&quot;START&quot;</span></span>
<span id="cb6-4"><a href="#cb6-4" tabindex="-1"></a><span class="co">!$omp parallel</span></span>
<span id="cb6-5"><a href="#cb6-5" tabindex="-1"></a>    <span class="fu">print</span> <span class="st">&#39;(&quot;omp_get_num_threads = &quot;, i2)&#39;</span>, omp_get_num_threads()</span>
<span id="cb6-6"><a href="#cb6-6" tabindex="-1"></a>    <span class="fu">print</span> <span class="st">&#39;(&quot;omp_get_thread_num = &quot;, i2)&#39;</span>, omp_get_thread_num()</span>
<span id="cb6-7"><a href="#cb6-7" tabindex="-1"></a><span class="co">!$omp end parallel</span></span>
<span id="cb6-8"><a href="#cb6-8" tabindex="-1"></a>    <span class="fu">print</span> <span class="kw">*</span>, <span class="st">&quot;END&quot;</span></span>
<span id="cb6-9"><a href="#cb6-9" tabindex="-1"></a><span class="kw">end subroutine</span> helloomp</span></code></pre></div>
<p>次に、次の内容の<code>helloomp.R</code>と言うファイルを作ります。</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode r"><code class="sourceCode r"><span id="cb7-1"><a href="#cb7-1" tabindex="-1"></a>dll <span class="ot">&lt;-</span> <span class="fu">paste</span>(<span class="st">&quot;helloomp.dll&quot;</span>, .Platform<span class="sc">$</span>dynlib.ext, <span class="at">sep=</span><span class="st">&quot;&quot;</span>)</span>
<span id="cb7-2"><a href="#cb7-2" tabindex="-1"></a>fs <span class="ot">&lt;-</span> <span class="fu">dyn.load</span>(dll)</span>
<span id="cb7-3"><a href="#cb7-3" tabindex="-1"></a></span>
<span id="cb7-4"><a href="#cb7-4" tabindex="-1"></a>result <span class="ot">&lt;-</span> <span class="fu">.Fortran</span>(<span class="st">&quot;helloomp&quot;</span>)</span>
<span id="cb7-5"><a href="#cb7-5" tabindex="-1"></a></span>
<span id="cb7-6"><a href="#cb7-6" tabindex="-1"></a><span class="fu">dyn.unload</span>(dll)</span></code></pre></div>
<p>コマンドプロンプトで2つのファイルを置いたディレクトリに移動して、</p>
<pre><code>R CMD SHLIB helloomp.f90
set OMP_NUM_THREADS=3
R --slave -f helloomp.R</code></pre>
<p>とすれば実行でき、</p>
<pre><code> START
omp_get_num_threads =  3
omp_get_thread_num =  0
omp_get_num_threads =  3
omp_get_thread_num =  2
omp_get_num_threads =  3
omp_get_thread_num =  1
 END</code></pre>
<p>と結果を得ることができます。環境変数で3スレッドの利用を指定して、3種類のスレット番号の出力が出ているので、マルチスレッドになっていることが分かりますね。</p>
<p>なお、<code>Rgui</code>から<code>helloomp.R</code>を呼んでも、後述する理由で何も表示されません。</p>
</div>
<div id="r経由でコンソール出力をする" class="section level2"
number="2.3">
<h2><span class="header-section-number">2.3</span>
R経由でコンソール出力をする</h2>
<p><code>Rgui</code>から呼ばれた場合、Fortranの<code>print</code>や<code>write</code>は画面に文字を表示しません。この問題を解決するために、R経由で表示するためのサブルーチンが用意されているので試してみましょう。</p>
<p>まず、以下の内容のファイル<code>print_via_R.f90</code>を用意します。</p>
<div class="sourceCode" id="cb10"><pre
class="sourceCode fortran"><code class="sourceCode fortranfixed"><span id="cb10-1"><a href="#cb10-1" tabindex="-1"></a><span class="kw">subroutine</span> printviar(x, n)</span>
<span id="cb10-2"><a href="#cb10-2" tabindex="-1"></a>    <span class="dt">double precision</span>,<span class="dt">intent(in)</span> <span class="dt">::</span> x</span>
<span id="cb10-3"><a href="#cb10-3" tabindex="-1"></a>    <span class="dt">integer</span>,<span class="dt">intent(in)</span> <span class="dt">::</span> n</span>
<span id="cb10-4"><a href="#cb10-4" tabindex="-1"></a></span>
<span id="cb10-5"><a href="#cb10-5" tabindex="-1"></a>    <span class="kw">call</span> labelpr(<span class="st">&#39;Printing via R&#39;</span>, <span class="kw">-</span><span class="dv">1</span>) <span class="co">! 文字列を表示</span></span>
<span id="cb10-6"><a href="#cb10-6" tabindex="-1"></a>    <span class="kw">call</span> dblepr1(<span class="st">&#39;x&#39;</span>, <span class="dv">1</span>, x) <span class="co">! double型を表示</span></span>
<span id="cb10-7"><a href="#cb10-7" tabindex="-1"></a>    <span class="kw">call</span> intpr1(<span class="st">&quot;n&quot;</span>, <span class="kw">-</span><span class="dv">1</span>, n) <span class="co">! integer型を表示</span></span>
<span id="cb10-8"><a href="#cb10-8" tabindex="-1"></a><span class="kw">end subroutine</span> printviar</span></code></pre></div>
<p>サブルーチン<code>labelpr</code>と<code>dblepr1</code>と<code>intpr1</code>の第1引数はラベルで、第2引数はラベルの長さです。<code>-1</code>を入れておくと文字列の長さを数えて全部表示してくれます。第3引数は中身を表示したい変数です。</p>
<p>次に、以下の内容の<code>print_via_R.R</code>を用意します。</p>
<div class="sourceCode" id="cb11"><pre class="sourceCode r"><code class="sourceCode r"><span id="cb11-1"><a href="#cb11-1" tabindex="-1"></a>dll <span class="ot">&lt;-</span> <span class="fu">paste</span>(<span class="st">&quot;print_via_R&quot;</span>, .Platform<span class="sc">$</span>dynlib.ext, <span class="at">sep=</span><span class="st">&quot;&quot;</span>)</span>
<span id="cb11-2"><a href="#cb11-2" tabindex="-1"></a>fs <span class="ot">&lt;-</span> <span class="fu">dyn.load</span>(dll)</span>
<span id="cb11-3"><a href="#cb11-3" tabindex="-1"></a></span>
<span id="cb11-4"><a href="#cb11-4" tabindex="-1"></a>r <span class="ot">&lt;-</span> <span class="fu">.Fortran</span>(<span class="st">&quot;printviar&quot;</span>,</span>
<span id="cb11-5"><a href="#cb11-5" tabindex="-1"></a>    <span class="fu">as.numeric</span>(pi),</span>
<span id="cb11-6"><a href="#cb11-6" tabindex="-1"></a>    <span class="fu">as.integer</span>(<span class="dv">1</span>))</span>
<span id="cb11-7"><a href="#cb11-7" tabindex="-1"></a></span>
<span id="cb11-8"><a href="#cb11-8" tabindex="-1"></a><span class="fu">dyn.unload</span>(dll)</span></code></pre></div>
<p>2つのファイルを置いたディレクトリで、<code>print_via_R.f90</code>をコンパイルした後に<code>Rgui</code>を呼び出します。</p>
<pre><code>R CMD SHLIB print_via_R.f90
R --slave -e &quot;system(file.path(R.home(\&quot;bin\&quot;), \&quot;Rgui.exe\&quot;))&quot;</code></pre>
<p><code>Rgui</code>から<code>print_via_R.f90</code>を呼ぶと、しっかり結果が戻ります。</p>
<div class="sourceCode" id="cb13"><pre class="sourceCode r"><code class="sourceCode r"><span id="cb13-1"><a href="#cb13-1" tabindex="-1"></a><span class="fu">source</span>(<span class="st">&quot;print_via_R.R&quot;</span>)</span></code></pre></div>
<pre><code>Printing via R
x
[1] 3.141593
n
[1] 1</code></pre>
<p>なお、R
4.0以前はdobule型/real型/integer型の配列を表示する<code>dblepr</code>/<code>realpr</code>/<code>intpr</code>だけが用意されており、R
4.0からラベルのみ表示するlabelprと、スカラーを表示できる<code>dblepr1</code>/<code>realpr1</code>/<code>intpr1</code>が用意されました。</p>
</div>
<div id="rでエラーと警告を出す" class="section level2" number="2.4">
<h2><span class="header-section-number">2.4</span>
Rでエラーと警告を出す</h2>
<p>サブルーチンが提供されています。</p>
<div class="sourceCode" id="cb15"><pre
class="sourceCode fortran"><code class="sourceCode fortranfixed"><span id="cb15-1"><a href="#cb15-1" tabindex="-1"></a>    <span class="kw">call</span> rwarn(<span class="st">&quot;This calcuration might be stopped!&quot;</span>)</span>
<span id="cb15-2"><a href="#cb15-2" tabindex="-1"></a>    <span class="kw">call</span> rexit(<span class="st">&quot;An error occured!&quot;</span>)</span></code></pre></div>
</div>
<div id="ユーザー中断の許可" class="section level2" number="2.5">
<h2><span class="header-section-number">2.5</span>
ユーザー中断の許可</h2>
<p>Fortranのコードの実行中はユーザー中断が許可されないのですが、ループ中に<code>call rchkusr()</code>を挟んでおくと、CTRL+Cなどが押されていれば、そこで中断されます。</p>
</div>
</div>
<div id="fortran-90以降を利用するときの注意" class="section level1"
number="3">
<h1><span class="header-section-number">3</span> Fortran
90以降を利用するときの注意</h1>
<p><code>?.Fortran</code>をしたら書いてある注意事項ですが、小文字でアンダースコアなしの名前にした方が無難なようです。</p>
<p>Fortran
2003からiso_c_bindingで<code>subroutine</code>に<code>bind(c)</code>をつけておくとCのオブジェクトファイルを生成するようになったので、“.C”関数でCの関数として呼び出すと言う手もあります。</p>
<div class="sourceCode" id="cb16"><pre
class="sourceCode fortran"><code class="sourceCode fortranfixed"><span id="cb16-1"><a href="#cb16-1" tabindex="-1"></a><span class="kw">SUBROUTINE</span> do_exchange(a, b) BIND(C, NAME<span class="kw">=</span><span class="st">&#39;exchange&#39;</span>)</span>
<span id="cb16-2"><a href="#cb16-2" tabindex="-1"></a>    <span class="kw">USE</span> iso_c_binding</span>
<span id="cb16-3"><a href="#cb16-3" tabindex="-1"></a>    <span class="dt">REAL(c_double)</span>, <span class="dt">intent(inout)</span> <span class="dt">::</span> a, b</span>
<span id="cb16-4"><a href="#cb16-4" tabindex="-1"></a>    <span class="dt">REAL(c_double)</span> <span class="dt">::</span> c</span>
<span id="cb16-5"><a href="#cb16-5" tabindex="-1"></a>    c <span class="kw">=</span> a</span>
<span id="cb16-6"><a href="#cb16-6" tabindex="-1"></a>    a <span class="kw">=</span> b</span>
<span id="cb16-7"><a href="#cb16-7" tabindex="-1"></a>    b <span class="kw">=</span> c</span>
<span id="cb16-8"><a href="#cb16-8" tabindex="-1"></a><span class="kw">END</span></span></code></pre></div>
<p>と言う風に<code>do_exchange.f90</code>をつくります。<code>.f03</code>は<code>\R CMD SHLIB</code>がフォートランのファイルとして認識しないので、<code>.f90</code>にしています。</p>
<div class="sourceCode" id="cb17"><pre class="sourceCode r"><code class="sourceCode r"><span id="cb17-1"><a href="#cb17-1" tabindex="-1"></a>dll <span class="ot">&lt;-</span> <span class="st">&quot;iso_c_binding.dll&quot;</span></span>
<span id="cb17-2"><a href="#cb17-2" tabindex="-1"></a>fs <span class="ot">&lt;-</span> <span class="fu">dyn.load</span>(dll)</span>
<span id="cb17-3"><a href="#cb17-3" tabindex="-1"></a></span>
<span id="cb17-4"><a href="#cb17-4" tabindex="-1"></a><span class="fu">print</span>(<span class="fu">.C</span>(<span class="st">&quot;exchange&quot;</span>, <span class="fu">as.double</span>(pi), <span class="fu">as.double</span>(<span class="sc">-</span><span class="dv">1</span>)))</span>
<span id="cb17-5"><a href="#cb17-5" tabindex="-1"></a></span>
<span id="cb17-6"><a href="#cb17-6" tabindex="-1"></a><span class="fu">dyn.unload</span>(dll)</span></code></pre></div>
<p><code>.C</code>で<code>BIND(C, NAME="...")</code>したFortranのコードを呼ぶときは、<code>NAME</code>で指定した名前で呼ぶことに注意してください。</p>
</div>
<div id="デバッガー" class="section level1" number="4">
<h1><span class="header-section-number">4</span> デバッガー</h1>
<p>C言語の場合と同様に、gdbを用いることができます。Fortran
90以降は<code>Makevars</code>の<code>FCFLAGS</code>に、それ以前は<code>FFLAGS</code>に<code>-g</code>オプションをつけるところに注意して、<a
href="./C-call.shtml#デバッガー">C言語の場合の説明</a>を参照してください。</p>
</div>
<div id="rがcに提供しているapiを呼び出す" class="section level1"
number="5">
<h1><span class="header-section-number">5</span>
RがCに提供しているAPIを呼び出す</h1>
<p>Rオブジェクトを作るAPIの利用などは無理がありそうですが、算術関係の関数は便利なこともあるでしょう。2つ利用例をあげておきます。</p>
<div id="引数の無いcの関数" class="section level2" number="5.1">
<h2><span class="header-section-number">5.1</span>
引数の無いCの関数</h2>
<p>Rのドキュメントに以下の乱数の生成のコードがあります。乱数生成は初期化の問題があるので、APIを使った方がよいでしょう。</p>
<div class="sourceCode" id="cb18"><pre
class="sourceCode fortran"><code class="sourceCode fortranfixed"><span id="cb18-1"><a href="#cb18-1" tabindex="-1"></a><span class="kw">module</span> rngfuncs</span>
<span id="cb18-2"><a href="#cb18-2" tabindex="-1"></a>    <span class="kw">use</span> iso_c_binding</span>
<span id="cb18-3"><a href="#cb18-3" tabindex="-1"></a>    <span class="kw">interface</span></span>
<span id="cb18-4"><a href="#cb18-4" tabindex="-1"></a>        <span class="dt">double precision</span> <span class="kw">function</span> unifRand() bind(C, name <span class="kw">=</span> <span class="st">&quot;unif_rand&quot;</span>)</span>
<span id="cb18-5"><a href="#cb18-5" tabindex="-1"></a>        <span class="kw">end function</span> unifRand</span>
<span id="cb18-6"><a href="#cb18-6" tabindex="-1"></a></span>
<span id="cb18-7"><a href="#cb18-7" tabindex="-1"></a>        <span class="kw">subroutine</span> getRNGseed() bind(C, name <span class="kw">=</span> <span class="st">&quot;GetRNGstate&quot;</span>)</span>
<span id="cb18-8"><a href="#cb18-8" tabindex="-1"></a>        <span class="kw">end subroutine</span> getRNGseed</span>
<span id="cb18-9"><a href="#cb18-9" tabindex="-1"></a></span>
<span id="cb18-10"><a href="#cb18-10" tabindex="-1"></a>        <span class="kw">subroutine</span> putRNGseed() bind(C, name <span class="kw">=</span> <span class="st">&quot;PutRNGstate&quot;</span>)</span>
<span id="cb18-11"><a href="#cb18-11" tabindex="-1"></a>        <span class="kw">end subroutine</span> putRNGseed</span>
<span id="cb18-12"><a href="#cb18-12" tabindex="-1"></a>        <span class="kw">end interface</span></span>
<span id="cb18-13"><a href="#cb18-13" tabindex="-1"></a><span class="kw">end module</span></span>
<span id="cb18-14"><a href="#cb18-14" tabindex="-1"></a></span>
<span id="cb18-15"><a href="#cb18-15" tabindex="-1"></a><span class="kw">subroutine</span> make_a_number(x)</span>
<span id="cb18-16"><a href="#cb18-16" tabindex="-1"></a>    <span class="kw">use</span> rngfuncs</span>
<span id="cb18-17"><a href="#cb18-17" tabindex="-1"></a>    <span class="dt">REAL(c_double)</span> <span class="dt">::</span> x</span>
<span id="cb18-18"><a href="#cb18-18" tabindex="-1"></a>    <span class="kw">call</span> getRNGseed()</span>
<span id="cb18-19"><a href="#cb18-19" tabindex="-1"></a>    y <span class="kw">=</span> unifRand()</span>
<span id="cb18-20"><a href="#cb18-20" tabindex="-1"></a>    <span class="kw">call</span> putRNGSeed()</span>
<span id="cb18-21"><a href="#cb18-21" tabindex="-1"></a><span class="kw">end subroutine</span></span></code></pre></div>
<p>DLLの作り方とRからの呼び出し方は、これまでと同様です。ファイル名を<code>make_a_number.f90</code>とでもして試してください。</p>
</div>
<div id="引数のあるcの関数" class="section level2" number="5.2">
<h2><span class="header-section-number">5.2</span>
引数のあるCの関数</h2>
<p>非ポインター引数のあるCの関数を呼び出す場合、ややこしい記述になります。Fortranの関数呼び出しの引数は、参照渡し、Cで言うポインターになっています。ポインターを引数に持ち、目的の関数を内部で呼び出すCの中継関数を用意して、Fortranからは中継関数を呼び出すようにします。</p>
<p>以下の内容の<code>relay_pnorm.c</code>を書きます。</p>
<div class="sourceCode" id="cb19"><pre
class="sourceCode fortran"><code class="sourceCode fortranfixed"><span id="cb19-1"><a href="#cb19-1" tabindex="-1"></a><span class="ot">#include&lt;R.h&gt;</span></span>
<span id="cb19-2"><a href="#cb19-2" tabindex="-1"></a><span class="ot">#include&lt;Rmath.h&gt;</span></span>
<span id="cb19-3"><a href="#cb19-3" tabindex="-1"></a></span>
<span id="cb19-4"><a href="#cb19-4" tabindex="-1"></a>double relay_pnorm(double <span class="kw">*</span>x, double <span class="kw">*</span>mu, double <span class="kw">*</span>sigma, <span class="bu">int</span> <span class="kw">*</span>lt, <span class="bu">int</span> <span class="kw">*</span>lg)<span class="kw">{</span></span>
<span id="cb19-5"><a href="#cb19-5" tabindex="-1"></a>    <span class="kw">return</span> pnorm(<span class="kw">*</span>x, <span class="kw">*</span>mu, <span class="kw">*</span>sigma, <span class="kw">*</span>lt, <span class="kw">*</span>lg);</span>
<span id="cb19-6"><a href="#cb19-6" tabindex="-1"></a><span class="kw">}</span></span></code></pre></div>
<p>以下の内容の<code>call_c_func.f90</code>を書きます。</p>
<div class="sourceCode" id="cb20"><pre
class="sourceCode fortran"><code class="sourceCode fortranfixed"><span id="cb20-1"><a href="#cb20-1" tabindex="-1"></a><span class="kw">module</span> interface_for_api</span>
<span id="cb20-2"><a href="#cb20-2" tabindex="-1"></a>    <span class="kw">use</span> iso_c_binding</span>
<span id="cb20-3"><a href="#cb20-3" tabindex="-1"></a>    <span class="kw">interface</span></span>
<span id="cb20-4"><a href="#cb20-4" tabindex="-1"></a>        <span class="dt">REAL(c_double)</span> <span class="kw">function</span> pnorm(x, mu, sigma, lt, lg) bind(C, name<span class="co"> = &quot;relay_pnorm&quot;)</span></span>
<span id="cb20-5"><a href="#cb20-5" tabindex="-1"></a>            import c_double, c_int <span class="co">! c_*とFortranの型の対応はiso_c_bindingを参照</span></span>
<span id="cb20-6"><a href="#cb20-6" tabindex="-1"></a>            <span class="kw">implicit</span> <span class="kw">none</span></span>
<span id="cb20-7"><a href="#cb20-7" tabindex="-1"></a>            <span class="dt">REAL(c_double)</span>, <span class="dt">intent(in)</span> <span class="dt">::</span> x, mu, sigma</span>
<span id="cb20-8"><a href="#cb20-8" tabindex="-1"></a>            <span class="dt">INTEGER(c_int)</span>, <span class="dt">intent(in)</span> <span class="dt">::</span> lt, lg</span>
<span id="cb20-9"><a href="#cb20-9" tabindex="-1"></a>        <span class="kw">end function</span></span>
<span id="cb20-10"><a href="#cb20-10" tabindex="-1"></a>    <span class="kw">end interface</span></span>
<span id="cb20-11"><a href="#cb20-11" tabindex="-1"></a><span class="kw">end module</span></span>
<span id="cb20-12"><a href="#cb20-12" tabindex="-1"></a></span>
<span id="cb20-13"><a href="#cb20-13" tabindex="-1"></a><span class="kw">subroutine</span> ipnorm(d, x1, x2)</span>
<span id="cb20-14"><a href="#cb20-14" tabindex="-1"></a>    <span class="kw">use</span> interface_for_api</span>
<span id="cb20-15"><a href="#cb20-15" tabindex="-1"></a>    <span class="kw">implicit</span> <span class="kw">none</span></span>
<span id="cb20-16"><a href="#cb20-16" tabindex="-1"></a>    <span class="dt">REAL(c_double)</span>, <span class="dt">intent(out)</span> <span class="dt">::</span> d</span>
<span id="cb20-17"><a href="#cb20-17" tabindex="-1"></a>    <span class="dt">REAL(c_double)</span>, <span class="dt">intent(in)</span> <span class="dt">::</span> x1, x2</span>
<span id="cb20-18"><a href="#cb20-18" tabindex="-1"></a>    <span class="dt">REAL(c_double)</span>, <span class="dt">parameter</span> <span class="dt">::</span> mu <span class="kw">=</span> <span class="fl">0.0</span>, sigma <span class="kw">=</span> <span class="fl">1.0</span> </span>
<span id="cb20-19"><a href="#cb20-19" tabindex="-1"></a>    <span class="dt">INTEGER(c_int)</span>, <span class="dt">parameter</span> <span class="dt">::</span> lt <span class="kw">=</span> <span class="kw">-</span><span class="dv">1</span>, lg <span class="kw">=</span> <span class="dv">0</span> <span class="co">! TRUEとFALSEに対応</span></span>
<span id="cb20-20"><a href="#cb20-20" tabindex="-1"></a>    d <span class="kw">=</span> pnorm(<span class="bu">max</span>(x1, x2), mu, sigma, lt, lg) <span class="kw">-</span> pnorm(<span class="bu">min</span>(x1, x2), mu, sigma, lt, lg)</span>
<span id="cb20-21"><a href="#cb20-21" tabindex="-1"></a><span class="kw">end subroutine</span></span></code></pre></div>
<p>以下のようにDLLを作成します。</p>
<pre><code>R CMD SHLIB call_api_for_c.f90 relay_pnorm.c</code></pre>
<p>Rからの呼び出し方は、これまでと同様です。Rを起動して、以下を入力したら計算します。</p>
<div class="sourceCode" id="cb22"><pre class="sourceCode r"><code class="sourceCode r"><span id="cb22-1"><a href="#cb22-1" tabindex="-1"></a>dll <span class="ot">&lt;-</span> <span class="fu">paste</span>(<span class="st">&quot;call_c_func&quot;</span>, .Platform<span class="sc">$</span>dynlib.ext, <span class="at">sep=</span><span class="st">&quot;&quot;</span>)</span>
<span id="cb22-2"><a href="#cb22-2" tabindex="-1"></a>fs <span class="ot">&lt;-</span> <span class="fu">dyn.load</span>(dll)</span>
<span id="cb22-3"><a href="#cb22-3" tabindex="-1"></a></span>
<span id="cb22-4"><a href="#cb22-4" tabindex="-1"></a>r <span class="ot">&lt;-</span> <span class="fu">.Fortran</span>(<span class="st">&quot;ipnorm&quot;</span>, <span class="fu">numeric</span>(<span class="dv">1</span>), <span class="fu">as.numeric</span>(<span class="sc">-</span><span class="dv">100</span>), <span class="fu">as.numeric</span>(<span class="dv">0</span>))</span>
<span id="cb22-5"><a href="#cb22-5" tabindex="-1"></a><span class="fu">print</span>(r) <span class="co"># リストの最初が戻り値になる</span></span>
<span id="cb22-6"><a href="#cb22-6" tabindex="-1"></a></span>
<span id="cb22-7"><a href="#cb22-7" tabindex="-1"></a><span class="fu">dyn.unload</span>(dll)</span></code></pre></div>
</div>
</div>
<div id="まとめ" class="section level1" number="6">
<h1><span class="header-section-number">6</span> まとめ</h1>
<p>無制約とはいかないのですが、容易に連携できるので、Fortranで書いたサブルーチンをRに流用するのには使えると思います。</p>
</div>
<div class="footnotes footnotes-end-of-document">
<hr />
<ol>
<li
id="fn1"><p>アルゴリズムを揃えた状態では（恐らく最適化のレベルが高いために）CやC++よりもパフォーマンスが高く、OpenMPを利用することで数値解析においてはマルチプロセッサにも容易に対応できます。<a
href="#fnref1" class="footnote-back">↩︎</a></p></li>
<li
id="fn2"><p>ファイル入出力やテキスト処理において最近人気のプログラミング言語に備わっているような正規表現のような機能がありませんし、そもそも設計が古いです。パッケージ配布システムも無く、埋め込みSQLが使えたりしますがデータベースとの接続も容易ではありません。プロットの機能もなく、数値解析ユーザーには不要でしょうが、対話型インターフェイスによる実行もできません。<a
href="#fnref2" class="footnote-back">↩︎</a></p></li>
<li
id="fn3"><p>簡潔だが十分に応用の利く言語仕様であること、容易にC/C++拡張が書けること、パッケージ配布システムが整っていることが使い勝手をよくしています。<a
href="#fnref3" class="footnote-back">↩︎</a></p></li>
<li
id="fn4"><p>線形代数演算ライブラリBLASに任せるベクトルや行列の処理、CやC++のコードに任せる拡張の処理は高速ですが、R自体で複雑なアルゴリズムを書くと関数型言語の限界により文字通り桁違いに遅くなります。<a
href="#fnref4" class="footnote-back">↩︎</a></p></li>
<li
id="fn5"><p>GUIのサポートが弱くアプリケーションの開発と配布では使われないと意味ではFortranとRは似ています。<a
href="#fnref5" class="footnote-back">↩︎</a></p></li>
<li
id="fn6"><p><code>%R_HOME%</code>は標準インストール時は<code>C:\Program Files\R\R-4.2.2\bin</code>になります。<a
href="#fnref6" class="footnote-back">↩︎</a></p></li>
</ol>
</div>

</div>
<div class="footer" id="footer"><!--#include virtual="/parts/footer.txt"--></div>
<script>include_parts('footer', 'https://wh.anlyznews.com/parts/footer.txt');</script>



</div>

<script>

// add bootstrap table styles to pandoc tables
function bootstrapStylePandocTables() {
  $('tr.odd').parent('tbody').parent('table').addClass('table table-condensed');
}
$(document).ready(function () {
  bootstrapStylePandocTables();
});


</script>

<!-- tabsets -->

<script>
$(document).ready(function () {
  window.buildTabsets("TOC");
});

$(document).ready(function () {
  $('.tabset-dropdown > .nav-tabs > li').click(function () {
    $(this).parent().toggleClass('nav-tabs-open');
  });
});
</script>

<!-- code folding -->


<script id="MathJax-script" async
  src="https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-svg.js">
</script>

</body>
</html>
